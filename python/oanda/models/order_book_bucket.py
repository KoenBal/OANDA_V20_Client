# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderBookBucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'str',
        'long_count_percent': 'str',
        'short_count_percent': 'str'
    }

    attribute_map = {
        'price': 'price',
        'long_count_percent': 'longCountPercent',
        'short_count_percent': 'shortCountPercent'
    }

    def __init__(self, price=None, long_count_percent=None, short_count_percent=None):  # noqa: E501
        """OrderBookBucket - a model defined in Swagger"""  # noqa: E501

        self._price = None
        self._long_count_percent = None
        self._short_count_percent = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if long_count_percent is not None:
            self.long_count_percent = long_count_percent
        if short_count_percent is not None:
            self.short_count_percent = short_count_percent

    @property
    def price(self):
        """Gets the price of this OrderBookBucket.  # noqa: E501

        The lowest price (inclusive) covered by the bucket. The bucket covers the price range from the price to price + the order book's bucketWidth.  # noqa: E501

        :return: The price of this OrderBookBucket.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderBookBucket.

        The lowest price (inclusive) covered by the bucket. The bucket covers the price range from the price to price + the order book's bucketWidth.  # noqa: E501

        :param price: The price of this OrderBookBucket.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def long_count_percent(self):
        """Gets the long_count_percent of this OrderBookBucket.  # noqa: E501

        The percentage of the total number of orders represented by the long orders found in this bucket.  # noqa: E501

        :return: The long_count_percent of this OrderBookBucket.  # noqa: E501
        :rtype: str
        """
        return self._long_count_percent

    @long_count_percent.setter
    def long_count_percent(self, long_count_percent):
        """Sets the long_count_percent of this OrderBookBucket.

        The percentage of the total number of orders represented by the long orders found in this bucket.  # noqa: E501

        :param long_count_percent: The long_count_percent of this OrderBookBucket.  # noqa: E501
        :type: str
        """

        self._long_count_percent = long_count_percent

    @property
    def short_count_percent(self):
        """Gets the short_count_percent of this OrderBookBucket.  # noqa: E501

        The percentage of the total number of orders represented by the short orders found in this bucket.  # noqa: E501

        :return: The short_count_percent of this OrderBookBucket.  # noqa: E501
        :rtype: str
        """
        return self._short_count_percent

    @short_count_percent.setter
    def short_count_percent(self, short_count_percent):
        """Sets the short_count_percent of this OrderBookBucket.

        The percentage of the total number of orders represented by the short orders found in this bucket.  # noqa: E501

        :param short_count_percent: The short_count_percent of this OrderBookBucket.  # noqa: E501
        :type: str
        """

        self._short_count_percent = short_count_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBookBucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
