# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientExtensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'tag': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'tag': 'tag',
        'comment': 'comment'
    }

    def __init__(self, id=None, tag=None, comment=None):  # noqa: E501
        """ClientExtensions - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._tag = None
        self._comment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if tag is not None:
            self.tag = tag
        if comment is not None:
            self.comment = comment

    @property
    def id(self):
        """Gets the id of this ClientExtensions.  # noqa: E501

        The Client ID of the Order/Trade  # noqa: E501

        :return: The id of this ClientExtensions.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientExtensions.

        The Client ID of the Order/Trade  # noqa: E501

        :param id: The id of this ClientExtensions.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tag(self):
        """Gets the tag of this ClientExtensions.  # noqa: E501

        A tag associated with the Order/Trade  # noqa: E501

        :return: The tag of this ClientExtensions.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ClientExtensions.

        A tag associated with the Order/Trade  # noqa: E501

        :param tag: The tag of this ClientExtensions.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def comment(self):
        """Gets the comment of this ClientExtensions.  # noqa: E501

        A comment associated with the Order/Trade  # noqa: E501

        :return: The comment of this ClientExtensions.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ClientExtensions.

        A comment associated with the Order/Trade  # noqa: E501

        :param comment: The comment of this ClientExtensions.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientExtensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
