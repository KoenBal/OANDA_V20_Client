# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.candlestick_data import CandlestickData  # noqa: F401,E501


class Candlestick(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'str',
        'bid': 'CandlestickData',
        'ask': 'CandlestickData',
        'mid': 'CandlestickData',
        'volume': 'int',
        'complete': 'bool'
    }

    attribute_map = {
        'time': 'time',
        'bid': 'bid',
        'ask': 'ask',
        'mid': 'mid',
        'volume': 'volume',
        'complete': 'complete'
    }

    def __init__(self, time=None, bid=None, ask=None, mid=None, volume=None, complete=None):  # noqa: E501
        """Candlestick - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._bid = None
        self._ask = None
        self._mid = None
        self._volume = None
        self._complete = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if bid is not None:
            self.bid = bid
        if ask is not None:
            self.ask = ask
        if mid is not None:
            self.mid = mid
        if volume is not None:
            self.volume = volume
        if complete is not None:
            self.complete = complete

    @property
    def time(self):
        """Gets the time of this Candlestick.  # noqa: E501

        The start time of the candlestick  # noqa: E501

        :return: The time of this Candlestick.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Candlestick.

        The start time of the candlestick  # noqa: E501

        :param time: The time of this Candlestick.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def bid(self):
        """Gets the bid of this Candlestick.  # noqa: E501


        :return: The bid of this Candlestick.  # noqa: E501
        :rtype: CandlestickData
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """Sets the bid of this Candlestick.


        :param bid: The bid of this Candlestick.  # noqa: E501
        :type: CandlestickData
        """

        self._bid = bid

    @property
    def ask(self):
        """Gets the ask of this Candlestick.  # noqa: E501


        :return: The ask of this Candlestick.  # noqa: E501
        :rtype: CandlestickData
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """Sets the ask of this Candlestick.


        :param ask: The ask of this Candlestick.  # noqa: E501
        :type: CandlestickData
        """

        self._ask = ask

    @property
    def mid(self):
        """Gets the mid of this Candlestick.  # noqa: E501


        :return: The mid of this Candlestick.  # noqa: E501
        :rtype: CandlestickData
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this Candlestick.


        :param mid: The mid of this Candlestick.  # noqa: E501
        :type: CandlestickData
        """

        self._mid = mid

    @property
    def volume(self):
        """Gets the volume of this Candlestick.  # noqa: E501

        The number of prices created during the time-range represented by the candlestick.  # noqa: E501

        :return: The volume of this Candlestick.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Candlestick.

        The number of prices created during the time-range represented by the candlestick.  # noqa: E501

        :param volume: The volume of this Candlestick.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def complete(self):
        """Gets the complete of this Candlestick.  # noqa: E501

        A flag indicating if the candlestick is complete. A complete candlestick is one whose ending time is not in the future.  # noqa: E501

        :return: The complete of this Candlestick.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this Candlestick.

        A flag indicating if the candlestick is complete. A complete candlestick is one whose ending time is not in the future.  # noqa: E501

        :param complete: The complete of this Candlestick.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Candlestick):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
