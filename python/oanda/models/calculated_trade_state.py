# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CalculatedTradeState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unrealized_pl': 'str',
        'margin_used': 'str'
    }

    attribute_map = {
        'id': 'id',
        'unrealized_pl': 'unrealizedPL',
        'margin_used': 'marginUsed'
    }

    def __init__(self, id=None, unrealized_pl=None, margin_used=None):  # noqa: E501
        """CalculatedTradeState - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._unrealized_pl = None
        self._margin_used = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if unrealized_pl is not None:
            self.unrealized_pl = unrealized_pl
        if margin_used is not None:
            self.margin_used = margin_used

    @property
    def id(self):
        """Gets the id of this CalculatedTradeState.  # noqa: E501

        The Trade's ID.  # noqa: E501

        :return: The id of this CalculatedTradeState.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculatedTradeState.

        The Trade's ID.  # noqa: E501

        :param id: The id of this CalculatedTradeState.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def unrealized_pl(self):
        """Gets the unrealized_pl of this CalculatedTradeState.  # noqa: E501

        The Trade's unrealized profit/loss.  # noqa: E501

        :return: The unrealized_pl of this CalculatedTradeState.  # noqa: E501
        :rtype: str
        """
        return self._unrealized_pl

    @unrealized_pl.setter
    def unrealized_pl(self, unrealized_pl):
        """Sets the unrealized_pl of this CalculatedTradeState.

        The Trade's unrealized profit/loss.  # noqa: E501

        :param unrealized_pl: The unrealized_pl of this CalculatedTradeState.  # noqa: E501
        :type: str
        """

        self._unrealized_pl = unrealized_pl

    @property
    def margin_used(self):
        """Gets the margin_used of this CalculatedTradeState.  # noqa: E501

        Margin currently used by the Trade.  # noqa: E501

        :return: The margin_used of this CalculatedTradeState.  # noqa: E501
        :rtype: str
        """
        return self._margin_used

    @margin_used.setter
    def margin_used(self, margin_used):
        """Sets the margin_used of this CalculatedTradeState.

        Margin currently used by the Trade.  # noqa: E501

        :param margin_used: The margin_used of this CalculatedTradeState.  # noqa: E501
        :type: str
        """

        self._margin_used = margin_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculatedTradeState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
