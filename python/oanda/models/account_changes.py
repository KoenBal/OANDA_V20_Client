# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.order import Order  # noqa: F401,E501
from oanda.models.position import Position  # noqa: F401,E501
from oanda.models.trade_summary import TradeSummary  # noqa: F401,E501
from oanda.models.transaction import Transaction  # noqa: F401,E501


class AccountChanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'orders_created': 'list[Order]',
        'orders_cancelled': 'list[Order]',
        'orders_filled': 'list[Order]',
        'orders_triggered': 'list[Order]',
        'trades_opened': 'list[TradeSummary]',
        'trades_reduced': 'list[TradeSummary]',
        'trades_closed': 'list[TradeSummary]',
        'positions': 'list[Position]',
        'transactions': 'list[Transaction]'
    }

    attribute_map = {
        'orders_created': 'ordersCreated',
        'orders_cancelled': 'ordersCancelled',
        'orders_filled': 'ordersFilled',
        'orders_triggered': 'ordersTriggered',
        'trades_opened': 'tradesOpened',
        'trades_reduced': 'tradesReduced',
        'trades_closed': 'tradesClosed',
        'positions': 'positions',
        'transactions': 'transactions'
    }

    def __init__(self, orders_created=None, orders_cancelled=None, orders_filled=None, orders_triggered=None, trades_opened=None, trades_reduced=None, trades_closed=None, positions=None, transactions=None):  # noqa: E501
        """AccountChanges - a model defined in Swagger"""  # noqa: E501

        self._orders_created = None
        self._orders_cancelled = None
        self._orders_filled = None
        self._orders_triggered = None
        self._trades_opened = None
        self._trades_reduced = None
        self._trades_closed = None
        self._positions = None
        self._transactions = None
        self.discriminator = None

        if orders_created is not None:
            self.orders_created = orders_created
        if orders_cancelled is not None:
            self.orders_cancelled = orders_cancelled
        if orders_filled is not None:
            self.orders_filled = orders_filled
        if orders_triggered is not None:
            self.orders_triggered = orders_triggered
        if trades_opened is not None:
            self.trades_opened = trades_opened
        if trades_reduced is not None:
            self.trades_reduced = trades_reduced
        if trades_closed is not None:
            self.trades_closed = trades_closed
        if positions is not None:
            self.positions = positions
        if transactions is not None:
            self.transactions = transactions

    @property
    def orders_created(self):
        """Gets the orders_created of this AccountChanges.  # noqa: E501

        The Orders created. These Orders may have been filled, cancelled or triggered in the same period.  # noqa: E501

        :return: The orders_created of this AccountChanges.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders_created

    @orders_created.setter
    def orders_created(self, orders_created):
        """Sets the orders_created of this AccountChanges.

        The Orders created. These Orders may have been filled, cancelled or triggered in the same period.  # noqa: E501

        :param orders_created: The orders_created of this AccountChanges.  # noqa: E501
        :type: list[Order]
        """

        self._orders_created = orders_created

    @property
    def orders_cancelled(self):
        """Gets the orders_cancelled of this AccountChanges.  # noqa: E501

        The Orders cancelled.  # noqa: E501

        :return: The orders_cancelled of this AccountChanges.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders_cancelled

    @orders_cancelled.setter
    def orders_cancelled(self, orders_cancelled):
        """Sets the orders_cancelled of this AccountChanges.

        The Orders cancelled.  # noqa: E501

        :param orders_cancelled: The orders_cancelled of this AccountChanges.  # noqa: E501
        :type: list[Order]
        """

        self._orders_cancelled = orders_cancelled

    @property
    def orders_filled(self):
        """Gets the orders_filled of this AccountChanges.  # noqa: E501

        The Orders filled.  # noqa: E501

        :return: The orders_filled of this AccountChanges.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders_filled

    @orders_filled.setter
    def orders_filled(self, orders_filled):
        """Sets the orders_filled of this AccountChanges.

        The Orders filled.  # noqa: E501

        :param orders_filled: The orders_filled of this AccountChanges.  # noqa: E501
        :type: list[Order]
        """

        self._orders_filled = orders_filled

    @property
    def orders_triggered(self):
        """Gets the orders_triggered of this AccountChanges.  # noqa: E501

        The Orders triggered.  # noqa: E501

        :return: The orders_triggered of this AccountChanges.  # noqa: E501
        :rtype: list[Order]
        """
        return self._orders_triggered

    @orders_triggered.setter
    def orders_triggered(self, orders_triggered):
        """Sets the orders_triggered of this AccountChanges.

        The Orders triggered.  # noqa: E501

        :param orders_triggered: The orders_triggered of this AccountChanges.  # noqa: E501
        :type: list[Order]
        """

        self._orders_triggered = orders_triggered

    @property
    def trades_opened(self):
        """Gets the trades_opened of this AccountChanges.  # noqa: E501

        The Trades opened.  # noqa: E501

        :return: The trades_opened of this AccountChanges.  # noqa: E501
        :rtype: list[TradeSummary]
        """
        return self._trades_opened

    @trades_opened.setter
    def trades_opened(self, trades_opened):
        """Sets the trades_opened of this AccountChanges.

        The Trades opened.  # noqa: E501

        :param trades_opened: The trades_opened of this AccountChanges.  # noqa: E501
        :type: list[TradeSummary]
        """

        self._trades_opened = trades_opened

    @property
    def trades_reduced(self):
        """Gets the trades_reduced of this AccountChanges.  # noqa: E501

        The Trades reduced.  # noqa: E501

        :return: The trades_reduced of this AccountChanges.  # noqa: E501
        :rtype: list[TradeSummary]
        """
        return self._trades_reduced

    @trades_reduced.setter
    def trades_reduced(self, trades_reduced):
        """Sets the trades_reduced of this AccountChanges.

        The Trades reduced.  # noqa: E501

        :param trades_reduced: The trades_reduced of this AccountChanges.  # noqa: E501
        :type: list[TradeSummary]
        """

        self._trades_reduced = trades_reduced

    @property
    def trades_closed(self):
        """Gets the trades_closed of this AccountChanges.  # noqa: E501

        The Trades closed.  # noqa: E501

        :return: The trades_closed of this AccountChanges.  # noqa: E501
        :rtype: list[TradeSummary]
        """
        return self._trades_closed

    @trades_closed.setter
    def trades_closed(self, trades_closed):
        """Sets the trades_closed of this AccountChanges.

        The Trades closed.  # noqa: E501

        :param trades_closed: The trades_closed of this AccountChanges.  # noqa: E501
        :type: list[TradeSummary]
        """

        self._trades_closed = trades_closed

    @property
    def positions(self):
        """Gets the positions of this AccountChanges.  # noqa: E501

        The Positions changed.  # noqa: E501

        :return: The positions of this AccountChanges.  # noqa: E501
        :rtype: list[Position]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this AccountChanges.

        The Positions changed.  # noqa: E501

        :param positions: The positions of this AccountChanges.  # noqa: E501
        :type: list[Position]
        """

        self._positions = positions

    @property
    def transactions(self):
        """Gets the transactions of this AccountChanges.  # noqa: E501

        The Transactions that have been generated.  # noqa: E501

        :return: The transactions of this AccountChanges.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this AccountChanges.

        The Transactions that have been generated.  # noqa: E501

        :param transactions: The transactions of this AccountChanges.  # noqa: E501
        :type: list[Transaction]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountChanges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
