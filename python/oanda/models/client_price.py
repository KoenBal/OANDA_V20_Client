# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.price_bucket import PriceBucket  # noqa: F401,E501


class ClientPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bids': 'list[PriceBucket]',
        'asks': 'list[PriceBucket]',
        'closeout_bid': 'str',
        'closeout_ask': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'bids': 'bids',
        'asks': 'asks',
        'closeout_bid': 'closeoutBid',
        'closeout_ask': 'closeoutAsk',
        'timestamp': 'timestamp'
    }

    def __init__(self, bids=None, asks=None, closeout_bid=None, closeout_ask=None, timestamp=None):  # noqa: E501
        """ClientPrice - a model defined in Swagger"""  # noqa: E501

        self._bids = None
        self._asks = None
        self._closeout_bid = None
        self._closeout_ask = None
        self._timestamp = None
        self.discriminator = None

        if bids is not None:
            self.bids = bids
        if asks is not None:
            self.asks = asks
        if closeout_bid is not None:
            self.closeout_bid = closeout_bid
        if closeout_ask is not None:
            self.closeout_ask = closeout_ask
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def bids(self):
        """Gets the bids of this ClientPrice.  # noqa: E501

        The list of prices and liquidity available on the Instrument's bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account.  # noqa: E501

        :return: The bids of this ClientPrice.  # noqa: E501
        :rtype: list[PriceBucket]
        """
        return self._bids

    @bids.setter
    def bids(self, bids):
        """Sets the bids of this ClientPrice.

        The list of prices and liquidity available on the Instrument's bid side. It is possible for this list to be empty if there is no bid liquidity currently available for the Instrument in the Account.  # noqa: E501

        :param bids: The bids of this ClientPrice.  # noqa: E501
        :type: list[PriceBucket]
        """

        self._bids = bids

    @property
    def asks(self):
        """Gets the asks of this ClientPrice.  # noqa: E501

        The list of prices and liquidity available on the Instrument's ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account.  # noqa: E501

        :return: The asks of this ClientPrice.  # noqa: E501
        :rtype: list[PriceBucket]
        """
        return self._asks

    @asks.setter
    def asks(self, asks):
        """Sets the asks of this ClientPrice.

        The list of prices and liquidity available on the Instrument's ask side. It is possible for this list to be empty if there is no ask liquidity currently available for the Instrument in the Account.  # noqa: E501

        :param asks: The asks of this ClientPrice.  # noqa: E501
        :type: list[PriceBucket]
        """

        self._asks = asks

    @property
    def closeout_bid(self):
        """Gets the closeout_bid of this ClientPrice.  # noqa: E501

        The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.  # noqa: E501

        :return: The closeout_bid of this ClientPrice.  # noqa: E501
        :rtype: str
        """
        return self._closeout_bid

    @closeout_bid.setter
    def closeout_bid(self, closeout_bid):
        """Sets the closeout_bid of this ClientPrice.

        The closeout bid Price. This Price is used when a bid is required to closeout a Position (margin closeout or manual) yet there is no bid liquidity. The closeout bid is never used to open a new position.  # noqa: E501

        :param closeout_bid: The closeout_bid of this ClientPrice.  # noqa: E501
        :type: str
        """

        self._closeout_bid = closeout_bid

    @property
    def closeout_ask(self):
        """Gets the closeout_ask of this ClientPrice.  # noqa: E501

        The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.  # noqa: E501

        :return: The closeout_ask of this ClientPrice.  # noqa: E501
        :rtype: str
        """
        return self._closeout_ask

    @closeout_ask.setter
    def closeout_ask(self, closeout_ask):
        """Sets the closeout_ask of this ClientPrice.

        The closeout ask Price. This Price is used when a ask is required to closeout a Position (margin closeout or manual) yet there is no ask liquidity. The closeout ask is never used to open a new position.  # noqa: E501

        :param closeout_ask: The closeout_ask of this ClientPrice.  # noqa: E501
        :type: str
        """

        self._closeout_ask = closeout_ask

    @property
    def timestamp(self):
        """Gets the timestamp of this ClientPrice.  # noqa: E501

        The date/time when the Price was created.  # noqa: E501

        :return: The timestamp of this ClientPrice.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClientPrice.

        The date/time when the Price was created.  # noqa: E501

        :param timestamp: The timestamp of this ClientPrice.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
