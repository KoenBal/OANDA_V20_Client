# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse20017(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'page_size': 'int',
        'type': 'list[str]',
        'count': 'int',
        'pages': 'list[str]',
        'last_transaction_id': 'str'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'page_size': 'pageSize',
        'type': 'type',
        'count': 'count',
        'pages': 'pages',
        'last_transaction_id': 'lastTransactionID'
    }

    def __init__(self, _from=None, to=None, page_size=None, type=None, count=None, pages=None, last_transaction_id=None):  # noqa: E501
        """InlineResponse20017 - a model defined in Swagger"""  # noqa: E501

        self.__from = None
        self._to = None
        self._page_size = None
        self._type = None
        self._count = None
        self._pages = None
        self._last_transaction_id = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if page_size is not None:
            self.page_size = page_size
        if type is not None:
            self.type = type
        if count is not None:
            self.count = count
        if pages is not None:
            self.pages = pages
        if last_transaction_id is not None:
            self.last_transaction_id = last_transaction_id

    @property
    def _from(self):
        """Gets the _from of this InlineResponse20017.  # noqa: E501

        The starting time provided in the request.  # noqa: E501

        :return: The _from of this InlineResponse20017.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this InlineResponse20017.

        The starting time provided in the request.  # noqa: E501

        :param _from: The _from of this InlineResponse20017.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this InlineResponse20017.  # noqa: E501

        The ending time provided in the request.  # noqa: E501

        :return: The to of this InlineResponse20017.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this InlineResponse20017.

        The ending time provided in the request.  # noqa: E501

        :param to: The to of this InlineResponse20017.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def page_size(self):
        """Gets the page_size of this InlineResponse20017.  # noqa: E501

        The pageSize provided in the request  # noqa: E501

        :return: The page_size of this InlineResponse20017.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this InlineResponse20017.

        The pageSize provided in the request  # noqa: E501

        :param page_size: The page_size of this InlineResponse20017.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def type(self):
        """Gets the type of this InlineResponse20017.  # noqa: E501

        The Transaction-type filter provided in the request  # noqa: E501

        :return: The type of this InlineResponse20017.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20017.

        The Transaction-type filter provided in the request  # noqa: E501

        :param type: The type of this InlineResponse20017.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ORDER", "FUNDING", "ADMIN", "CREATE", "CLOSE", "REOPEN", "CLIENT_CONFIGURE", "CLIENT_CONFIGURE_REJECT", "TRANSFER_FUNDS", "TRANSFER_FUNDS_REJECT", "MARKET_ORDER", "MARKET_ORDER_REJECT", "LIMIT_ORDER", "LIMIT_ORDER_REJECT", "STOP_ORDER", "STOP_ORDER_REJECT", "MARKET_IF_TOUCHED_ORDER", "MARKET_IF_TOUCHED_ORDER_REJECT", "TAKE_PROFIT_ORDER", "TAKE_PROFIT_ORDER_REJECT", "STOP_LOSS_ORDER", "STOP_LOSS_ORDER_REJECT", "TRAILING_STOP_LOSS_ORDER", "TRAILING_STOP_LOSS_ORDER_REJECT", "ONE_CANCELS_ALL_ORDER", "ONE_CANCELS_ALL_ORDER_REJECT", "ONE_CANCELS_ALL_ORDER_TRIGGERED", "ORDER_FILL", "ORDER_CANCEL", "ORDER_CANCEL_REJECT", "ORDER_CLIENT_EXTENSIONS_MODIFY", "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT", "TRADE_CLIENT_EXTENSIONS_MODIFY", "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT", "MARGIN_CALL_ENTER", "MARGIN_CALL_EXTEND", "MARGIN_CALL_EXIT", "DELAYED_TRADE_CLOSURE", "DAILY_FINANCING", "RESET_RESETTABLE_PL"]  # noqa: E501
        if not set(type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._type = type

    @property
    def count(self):
        """Gets the count of this InlineResponse20017.  # noqa: E501

        The number of Transactions that are contained in the pages returned  # noqa: E501

        :return: The count of this InlineResponse20017.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this InlineResponse20017.

        The number of Transactions that are contained in the pages returned  # noqa: E501

        :param count: The count of this InlineResponse20017.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def pages(self):
        """Gets the pages of this InlineResponse20017.  # noqa: E501

        The list of URLs that represent idrange queries providing the data for each page in the query results  # noqa: E501

        :return: The pages of this InlineResponse20017.  # noqa: E501
        :rtype: list[str]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this InlineResponse20017.

        The list of URLs that represent idrange queries providing the data for each page in the query results  # noqa: E501

        :param pages: The pages of this InlineResponse20017.  # noqa: E501
        :type: list[str]
        """

        self._pages = pages

    @property
    def last_transaction_id(self):
        """Gets the last_transaction_id of this InlineResponse20017.  # noqa: E501

        The ID of the most recent Transaction created for the Account  # noqa: E501

        :return: The last_transaction_id of this InlineResponse20017.  # noqa: E501
        :rtype: str
        """
        return self._last_transaction_id

    @last_transaction_id.setter
    def last_transaction_id(self, last_transaction_id):
        """Sets the last_transaction_id of this InlineResponse20017.

        The ID of the most recent Transaction created for the Account  # noqa: E501

        :param last_transaction_id: The last_transaction_id of this InlineResponse20017.  # noqa: E501
        :type: str
        """

        self._last_transaction_id = last_transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20017):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
