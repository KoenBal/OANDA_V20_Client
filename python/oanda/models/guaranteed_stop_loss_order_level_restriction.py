# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GuaranteedStopLossOrderLevelRestriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume': 'str',
        'price_range': 'str'
    }

    attribute_map = {
        'volume': 'volume',
        'price_range': 'priceRange'
    }

    def __init__(self, volume=None, price_range=None):  # noqa: E501
        """GuaranteedStopLossOrderLevelRestriction - a model defined in Swagger"""  # noqa: E501

        self._volume = None
        self._price_range = None
        self.discriminator = None

        if volume is not None:
            self.volume = volume
        if price_range is not None:
            self.price_range = price_range

    @property
    def volume(self):
        """Gets the volume of this GuaranteedStopLossOrderLevelRestriction.  # noqa: E501

        Applies to Trades with a guaranteed Stop Loss Order attached for the specified Instrument. This is the total allowed Trade volume that can exist within the priceRange based on the trigger prices of the guaranteed Stop Loss Orders.  # noqa: E501

        :return: The volume of this GuaranteedStopLossOrderLevelRestriction.  # noqa: E501
        :rtype: str
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GuaranteedStopLossOrderLevelRestriction.

        Applies to Trades with a guaranteed Stop Loss Order attached for the specified Instrument. This is the total allowed Trade volume that can exist within the priceRange based on the trigger prices of the guaranteed Stop Loss Orders.  # noqa: E501

        :param volume: The volume of this GuaranteedStopLossOrderLevelRestriction.  # noqa: E501
        :type: str
        """

        self._volume = volume

    @property
    def price_range(self):
        """Gets the price_range of this GuaranteedStopLossOrderLevelRestriction.  # noqa: E501

        The price range the volume applies to. This value is in price units.  # noqa: E501

        :return: The price_range of this GuaranteedStopLossOrderLevelRestriction.  # noqa: E501
        :rtype: str
        """
        return self._price_range

    @price_range.setter
    def price_range(self, price_range):
        """Sets the price_range of this GuaranteedStopLossOrderLevelRestriction.

        The price range the volume applies to. This value is in price units.  # noqa: E501

        :param price_range: The price_range of this GuaranteedStopLossOrderLevelRestriction.  # noqa: E501
        :type: str
        """

        self._price_range = price_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedStopLossOrderLevelRestriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
