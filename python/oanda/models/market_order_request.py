# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.client_extensions import ClientExtensions  # noqa: F401,E501
from oanda.models.stop_loss_details import StopLossDetails  # noqa: F401,E501
from oanda.models.take_profit_details import TakeProfitDetails  # noqa: F401,E501
from oanda.models.trailing_stop_loss_details import TrailingStopLossDetails  # noqa: F401,E501


class MarketOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'instrument': 'str',
        'units': 'str',
        'time_in_force': 'str',
        'price_bound': 'str',
        'position_fill': 'str',
        'client_extensions': 'ClientExtensions',
        'take_profit_on_fill': 'TakeProfitDetails',
        'stop_loss_on_fill': 'StopLossDetails',
        'trailing_stop_loss_on_fill': 'TrailingStopLossDetails',
        'trade_client_extensions': 'ClientExtensions'
    }

    attribute_map = {
        'type': 'type',
        'instrument': 'instrument',
        'units': 'units',
        'time_in_force': 'timeInForce',
        'price_bound': 'priceBound',
        'position_fill': 'positionFill',
        'client_extensions': 'clientExtensions',
        'take_profit_on_fill': 'takeProfitOnFill',
        'stop_loss_on_fill': 'stopLossOnFill',
        'trailing_stop_loss_on_fill': 'trailingStopLossOnFill',
        'trade_client_extensions': 'tradeClientExtensions'
    }

    def __init__(self, type=None, instrument=None, units=None, time_in_force=None, price_bound=None, position_fill=None, client_extensions=None, take_profit_on_fill=None, stop_loss_on_fill=None, trailing_stop_loss_on_fill=None, trade_client_extensions=None):  # noqa: E501
        """MarketOrderRequest - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._instrument = None
        self._units = None
        self._time_in_force = None
        self._price_bound = None
        self._position_fill = None
        self._client_extensions = None
        self._take_profit_on_fill = None
        self._stop_loss_on_fill = None
        self._trailing_stop_loss_on_fill = None
        self._trade_client_extensions = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if instrument is not None:
            self.instrument = instrument
        if units is not None:
            self.units = units
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if price_bound is not None:
            self.price_bound = price_bound
        if position_fill is not None:
            self.position_fill = position_fill
        if client_extensions is not None:
            self.client_extensions = client_extensions
        if take_profit_on_fill is not None:
            self.take_profit_on_fill = take_profit_on_fill
        if stop_loss_on_fill is not None:
            self.stop_loss_on_fill = stop_loss_on_fill
        if trailing_stop_loss_on_fill is not None:
            self.trailing_stop_loss_on_fill = trailing_stop_loss_on_fill
        if trade_client_extensions is not None:
            self.trade_client_extensions = trade_client_extensions

    @property
    def type(self):
        """Gets the type of this MarketOrderRequest.  # noqa: E501

        The type of the Order to Create. Must be set to \"MARKET\" when creating a Market Order.  # noqa: E501

        :return: The type of this MarketOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MarketOrderRequest.

        The type of the Order to Create. Must be set to \"MARKET\" when creating a Market Order.  # noqa: E501

        :param type: The type of this MarketOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["MARKET", "LIMIT", "STOP", "MARKET_IF_TOUCHED", "TAKE_PROFIT", "STOP_LOSS", "TRAILING_STOP_LOSS", "FIXED_PRICE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def instrument(self):
        """Gets the instrument of this MarketOrderRequest.  # noqa: E501

        The Market Order's Instrument.  # noqa: E501

        :return: The instrument of this MarketOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this MarketOrderRequest.

        The Market Order's Instrument.  # noqa: E501

        :param instrument: The instrument of this MarketOrderRequest.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def units(self):
        """Gets the units of this MarketOrderRequest.  # noqa: E501

        The quantity requested to be filled by the Market Order. A posititive number of units results in a long Order, and a negative number of units results in a short Order.  # noqa: E501

        :return: The units of this MarketOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this MarketOrderRequest.

        The quantity requested to be filled by the Market Order. A posititive number of units results in a long Order, and a negative number of units results in a short Order.  # noqa: E501

        :param units: The units of this MarketOrderRequest.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def time_in_force(self):
        """Gets the time_in_force of this MarketOrderRequest.  # noqa: E501

        The time-in-force requested for the Market Order. Restricted to FOK or IOC for a MarketOrder.  # noqa: E501

        :return: The time_in_force of this MarketOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this MarketOrderRequest.

        The time-in-force requested for the Market Order. Restricted to FOK or IOC for a MarketOrder.  # noqa: E501

        :param time_in_force: The time_in_force of this MarketOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["GTC", "GTD", "GFD", "FOK", "IOC"]  # noqa: E501
        if time_in_force not in allowed_values:
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}"  # noqa: E501
                .format(time_in_force, allowed_values)
            )

        self._time_in_force = time_in_force

    @property
    def price_bound(self):
        """Gets the price_bound of this MarketOrderRequest.  # noqa: E501

        The worst price that the client is willing to have the Market Order filled at.  # noqa: E501

        :return: The price_bound of this MarketOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._price_bound

    @price_bound.setter
    def price_bound(self, price_bound):
        """Sets the price_bound of this MarketOrderRequest.

        The worst price that the client is willing to have the Market Order filled at.  # noqa: E501

        :param price_bound: The price_bound of this MarketOrderRequest.  # noqa: E501
        :type: str
        """

        self._price_bound = price_bound

    @property
    def position_fill(self):
        """Gets the position_fill of this MarketOrderRequest.  # noqa: E501

        Specification of how Positions in the Account are modified when the Order is filled.  # noqa: E501

        :return: The position_fill of this MarketOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._position_fill

    @position_fill.setter
    def position_fill(self, position_fill):
        """Sets the position_fill of this MarketOrderRequest.

        Specification of how Positions in the Account are modified when the Order is filled.  # noqa: E501

        :param position_fill: The position_fill of this MarketOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN_ONLY", "REDUCE_FIRST", "REDUCE_ONLY", "DEFAULT"]  # noqa: E501
        if position_fill not in allowed_values:
            raise ValueError(
                "Invalid value for `position_fill` ({0}), must be one of {1}"  # noqa: E501
                .format(position_fill, allowed_values)
            )

        self._position_fill = position_fill

    @property
    def client_extensions(self):
        """Gets the client_extensions of this MarketOrderRequest.  # noqa: E501


        :return: The client_extensions of this MarketOrderRequest.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._client_extensions

    @client_extensions.setter
    def client_extensions(self, client_extensions):
        """Sets the client_extensions of this MarketOrderRequest.


        :param client_extensions: The client_extensions of this MarketOrderRequest.  # noqa: E501
        :type: ClientExtensions
        """

        self._client_extensions = client_extensions

    @property
    def take_profit_on_fill(self):
        """Gets the take_profit_on_fill of this MarketOrderRequest.  # noqa: E501


        :return: The take_profit_on_fill of this MarketOrderRequest.  # noqa: E501
        :rtype: TakeProfitDetails
        """
        return self._take_profit_on_fill

    @take_profit_on_fill.setter
    def take_profit_on_fill(self, take_profit_on_fill):
        """Sets the take_profit_on_fill of this MarketOrderRequest.


        :param take_profit_on_fill: The take_profit_on_fill of this MarketOrderRequest.  # noqa: E501
        :type: TakeProfitDetails
        """

        self._take_profit_on_fill = take_profit_on_fill

    @property
    def stop_loss_on_fill(self):
        """Gets the stop_loss_on_fill of this MarketOrderRequest.  # noqa: E501


        :return: The stop_loss_on_fill of this MarketOrderRequest.  # noqa: E501
        :rtype: StopLossDetails
        """
        return self._stop_loss_on_fill

    @stop_loss_on_fill.setter
    def stop_loss_on_fill(self, stop_loss_on_fill):
        """Sets the stop_loss_on_fill of this MarketOrderRequest.


        :param stop_loss_on_fill: The stop_loss_on_fill of this MarketOrderRequest.  # noqa: E501
        :type: StopLossDetails
        """

        self._stop_loss_on_fill = stop_loss_on_fill

    @property
    def trailing_stop_loss_on_fill(self):
        """Gets the trailing_stop_loss_on_fill of this MarketOrderRequest.  # noqa: E501


        :return: The trailing_stop_loss_on_fill of this MarketOrderRequest.  # noqa: E501
        :rtype: TrailingStopLossDetails
        """
        return self._trailing_stop_loss_on_fill

    @trailing_stop_loss_on_fill.setter
    def trailing_stop_loss_on_fill(self, trailing_stop_loss_on_fill):
        """Sets the trailing_stop_loss_on_fill of this MarketOrderRequest.


        :param trailing_stop_loss_on_fill: The trailing_stop_loss_on_fill of this MarketOrderRequest.  # noqa: E501
        :type: TrailingStopLossDetails
        """

        self._trailing_stop_loss_on_fill = trailing_stop_loss_on_fill

    @property
    def trade_client_extensions(self):
        """Gets the trade_client_extensions of this MarketOrderRequest.  # noqa: E501


        :return: The trade_client_extensions of this MarketOrderRequest.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._trade_client_extensions

    @trade_client_extensions.setter
    def trade_client_extensions(self, trade_client_extensions):
        """Sets the trade_client_extensions of this MarketOrderRequest.


        :param trade_client_extensions: The trade_client_extensions of this MarketOrderRequest.  # noqa: E501
        :type: ClientExtensions
        """

        self._trade_client_extensions = trade_client_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
