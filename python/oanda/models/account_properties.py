# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'mt4_account_id': 'int',
        'tags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'mt4_account_id': 'mt4AccountID',
        'tags': 'tags'
    }

    def __init__(self, id=None, mt4_account_id=None, tags=None):  # noqa: E501
        """AccountProperties - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._mt4_account_id = None
        self._tags = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if mt4_account_id is not None:
            self.mt4_account_id = mt4_account_id
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this AccountProperties.  # noqa: E501

        The Account's identifier  # noqa: E501

        :return: The id of this AccountProperties.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountProperties.

        The Account's identifier  # noqa: E501

        :param id: The id of this AccountProperties.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mt4_account_id(self):
        """Gets the mt4_account_id of this AccountProperties.  # noqa: E501

        The Account's associated MT4 Account ID. This field will not be present if the Account is not an MT4 account.  # noqa: E501

        :return: The mt4_account_id of this AccountProperties.  # noqa: E501
        :rtype: int
        """
        return self._mt4_account_id

    @mt4_account_id.setter
    def mt4_account_id(self, mt4_account_id):
        """Sets the mt4_account_id of this AccountProperties.

        The Account's associated MT4 Account ID. This field will not be present if the Account is not an MT4 account.  # noqa: E501

        :param mt4_account_id: The mt4_account_id of this AccountProperties.  # noqa: E501
        :type: int
        """

        self._mt4_account_id = mt4_account_id

    @property
    def tags(self):
        """Gets the tags of this AccountProperties.  # noqa: E501

        The Account's tags  # noqa: E501

        :return: The tags of this AccountProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AccountProperties.

        The Account's tags  # noqa: E501

        :param tags: The tags of this AccountProperties.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
