# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.order_client_extensions_modify_transaction import OrderClientExtensionsModifyTransaction  # noqa: F401,E501


class InlineResponse20010(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_client_extensions_modify_transaction': 'OrderClientExtensionsModifyTransaction',
        'last_transaction_id': 'str',
        'related_transaction_i_ds': 'list[str]'
    }

    attribute_map = {
        'order_client_extensions_modify_transaction': 'orderClientExtensionsModifyTransaction',
        'last_transaction_id': 'lastTransactionID',
        'related_transaction_i_ds': 'relatedTransactionIDs'
    }

    def __init__(self, order_client_extensions_modify_transaction=None, last_transaction_id=None, related_transaction_i_ds=None):  # noqa: E501
        """InlineResponse20010 - a model defined in Swagger"""  # noqa: E501

        self._order_client_extensions_modify_transaction = None
        self._last_transaction_id = None
        self._related_transaction_i_ds = None
        self.discriminator = None

        if order_client_extensions_modify_transaction is not None:
            self.order_client_extensions_modify_transaction = order_client_extensions_modify_transaction
        if last_transaction_id is not None:
            self.last_transaction_id = last_transaction_id
        if related_transaction_i_ds is not None:
            self.related_transaction_i_ds = related_transaction_i_ds

    @property
    def order_client_extensions_modify_transaction(self):
        """Gets the order_client_extensions_modify_transaction of this InlineResponse20010.  # noqa: E501


        :return: The order_client_extensions_modify_transaction of this InlineResponse20010.  # noqa: E501
        :rtype: OrderClientExtensionsModifyTransaction
        """
        return self._order_client_extensions_modify_transaction

    @order_client_extensions_modify_transaction.setter
    def order_client_extensions_modify_transaction(self, order_client_extensions_modify_transaction):
        """Sets the order_client_extensions_modify_transaction of this InlineResponse20010.


        :param order_client_extensions_modify_transaction: The order_client_extensions_modify_transaction of this InlineResponse20010.  # noqa: E501
        :type: OrderClientExtensionsModifyTransaction
        """

        self._order_client_extensions_modify_transaction = order_client_extensions_modify_transaction

    @property
    def last_transaction_id(self):
        """Gets the last_transaction_id of this InlineResponse20010.  # noqa: E501

        The ID of the most recent Transaction created for the Account  # noqa: E501

        :return: The last_transaction_id of this InlineResponse20010.  # noqa: E501
        :rtype: str
        """
        return self._last_transaction_id

    @last_transaction_id.setter
    def last_transaction_id(self, last_transaction_id):
        """Sets the last_transaction_id of this InlineResponse20010.

        The ID of the most recent Transaction created for the Account  # noqa: E501

        :param last_transaction_id: The last_transaction_id of this InlineResponse20010.  # noqa: E501
        :type: str
        """

        self._last_transaction_id = last_transaction_id

    @property
    def related_transaction_i_ds(self):
        """Gets the related_transaction_i_ds of this InlineResponse20010.  # noqa: E501

        The IDs of all Transactions that were created while satisfying the request.  # noqa: E501

        :return: The related_transaction_i_ds of this InlineResponse20010.  # noqa: E501
        :rtype: list[str]
        """
        return self._related_transaction_i_ds

    @related_transaction_i_ds.setter
    def related_transaction_i_ds(self, related_transaction_i_ds):
        """Sets the related_transaction_i_ds of this InlineResponse20010.

        The IDs of all Transactions that were created while satisfying the request.  # noqa: E501

        :param related_transaction_i_ds: The related_transaction_i_ds of this InlineResponse20010.  # noqa: E501
        :type: list[str]
        """

        self._related_transaction_i_ds = related_transaction_i_ds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20010):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
