# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.stop_loss_details import StopLossDetails  # noqa: F401,E501
from oanda.models.take_profit_details import TakeProfitDetails  # noqa: F401,E501
from oanda.models.trailing_stop_loss_details import TrailingStopLossDetails  # noqa: F401,E501


class SetTradeDependentOrdersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'take_profit': 'TakeProfitDetails',
        'stop_loss': 'StopLossDetails',
        'trailing_stop_loss': 'TrailingStopLossDetails'
    }

    attribute_map = {
        'take_profit': 'takeProfit',
        'stop_loss': 'stopLoss',
        'trailing_stop_loss': 'trailingStopLoss'
    }

    def __init__(self, take_profit=None, stop_loss=None, trailing_stop_loss=None):  # noqa: E501
        """SetTradeDependentOrdersBody - a model defined in Swagger"""  # noqa: E501

        self._take_profit = None
        self._stop_loss = None
        self._trailing_stop_loss = None
        self.discriminator = None

        if take_profit is not None:
            self.take_profit = take_profit
        if stop_loss is not None:
            self.stop_loss = stop_loss
        if trailing_stop_loss is not None:
            self.trailing_stop_loss = trailing_stop_loss

    @property
    def take_profit(self):
        """Gets the take_profit of this SetTradeDependentOrdersBody.  # noqa: E501


        :return: The take_profit of this SetTradeDependentOrdersBody.  # noqa: E501
        :rtype: TakeProfitDetails
        """
        return self._take_profit

    @take_profit.setter
    def take_profit(self, take_profit):
        """Sets the take_profit of this SetTradeDependentOrdersBody.


        :param take_profit: The take_profit of this SetTradeDependentOrdersBody.  # noqa: E501
        :type: TakeProfitDetails
        """

        self._take_profit = take_profit

    @property
    def stop_loss(self):
        """Gets the stop_loss of this SetTradeDependentOrdersBody.  # noqa: E501


        :return: The stop_loss of this SetTradeDependentOrdersBody.  # noqa: E501
        :rtype: StopLossDetails
        """
        return self._stop_loss

    @stop_loss.setter
    def stop_loss(self, stop_loss):
        """Sets the stop_loss of this SetTradeDependentOrdersBody.


        :param stop_loss: The stop_loss of this SetTradeDependentOrdersBody.  # noqa: E501
        :type: StopLossDetails
        """

        self._stop_loss = stop_loss

    @property
    def trailing_stop_loss(self):
        """Gets the trailing_stop_loss of this SetTradeDependentOrdersBody.  # noqa: E501


        :return: The trailing_stop_loss of this SetTradeDependentOrdersBody.  # noqa: E501
        :rtype: TrailingStopLossDetails
        """
        return self._trailing_stop_loss

    @trailing_stop_loss.setter
    def trailing_stop_loss(self, trailing_stop_loss):
        """Sets the trailing_stop_loss of this SetTradeDependentOrdersBody.


        :param trailing_stop_loss: The trailing_stop_loss of this SetTradeDependentOrdersBody.  # noqa: E501
        :type: TrailingStopLossDetails
        """

        self._trailing_stop_loss = trailing_stop_loss

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetTradeDependentOrdersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
