# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.guaranteed_stop_loss_order_level_restriction import GuaranteedStopLossOrderLevelRestriction  # noqa: F401,E501


class GuaranteedStopLossOrderEntryData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minimum_distance': 'str',
        'premium': 'str',
        'level_restriction': 'GuaranteedStopLossOrderLevelRestriction'
    }

    attribute_map = {
        'minimum_distance': 'minimumDistance',
        'premium': 'premium',
        'level_restriction': 'levelRestriction'
    }

    def __init__(self, minimum_distance=None, premium=None, level_restriction=None):  # noqa: E501
        """GuaranteedStopLossOrderEntryData - a model defined in Swagger"""  # noqa: E501

        self._minimum_distance = None
        self._premium = None
        self._level_restriction = None
        self.discriminator = None

        if minimum_distance is not None:
            self.minimum_distance = minimum_distance
        if premium is not None:
            self.premium = premium
        if level_restriction is not None:
            self.level_restriction = level_restriction

    @property
    def minimum_distance(self):
        """Gets the minimum_distance of this GuaranteedStopLossOrderEntryData.  # noqa: E501

        The minimum distance allowed between the Trade's fill price and the configured price for guaranteed Stop Loss Orders created for this instrument. Specified in price units.  # noqa: E501

        :return: The minimum_distance of this GuaranteedStopLossOrderEntryData.  # noqa: E501
        :rtype: str
        """
        return self._minimum_distance

    @minimum_distance.setter
    def minimum_distance(self, minimum_distance):
        """Sets the minimum_distance of this GuaranteedStopLossOrderEntryData.

        The minimum distance allowed between the Trade's fill price and the configured price for guaranteed Stop Loss Orders created for this instrument. Specified in price units.  # noqa: E501

        :param minimum_distance: The minimum_distance of this GuaranteedStopLossOrderEntryData.  # noqa: E501
        :type: str
        """

        self._minimum_distance = minimum_distance

    @property
    def premium(self):
        """Gets the premium of this GuaranteedStopLossOrderEntryData.  # noqa: E501

        The amount that is charged to the account if a guaranteed Stop Loss Order is triggered and filled. The value is in price units and is charged for each unit of the Trade.  # noqa: E501

        :return: The premium of this GuaranteedStopLossOrderEntryData.  # noqa: E501
        :rtype: str
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this GuaranteedStopLossOrderEntryData.

        The amount that is charged to the account if a guaranteed Stop Loss Order is triggered and filled. The value is in price units and is charged for each unit of the Trade.  # noqa: E501

        :param premium: The premium of this GuaranteedStopLossOrderEntryData.  # noqa: E501
        :type: str
        """

        self._premium = premium

    @property
    def level_restriction(self):
        """Gets the level_restriction of this GuaranteedStopLossOrderEntryData.  # noqa: E501


        :return: The level_restriction of this GuaranteedStopLossOrderEntryData.  # noqa: E501
        :rtype: GuaranteedStopLossOrderLevelRestriction
        """
        return self._level_restriction

    @level_restriction.setter
    def level_restriction(self, level_restriction):
        """Sets the level_restriction of this GuaranteedStopLossOrderEntryData.


        :param level_restriction: The level_restriction of this GuaranteedStopLossOrderEntryData.  # noqa: E501
        :type: GuaranteedStopLossOrderLevelRestriction
        """

        self._level_restriction = level_restriction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedStopLossOrderEntryData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
