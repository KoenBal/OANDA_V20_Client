# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MarketOrderDelayedTradeClose(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_id': 'str',
        'client_trade_id': 'str',
        'source_transaction_id': 'str'
    }

    attribute_map = {
        'trade_id': 'tradeID',
        'client_trade_id': 'clientTradeID',
        'source_transaction_id': 'sourceTransactionID'
    }

    def __init__(self, trade_id=None, client_trade_id=None, source_transaction_id=None):  # noqa: E501
        """MarketOrderDelayedTradeClose - a model defined in Swagger"""  # noqa: E501

        self._trade_id = None
        self._client_trade_id = None
        self._source_transaction_id = None
        self.discriminator = None

        if trade_id is not None:
            self.trade_id = trade_id
        if client_trade_id is not None:
            self.client_trade_id = client_trade_id
        if source_transaction_id is not None:
            self.source_transaction_id = source_transaction_id

    @property
    def trade_id(self):
        """Gets the trade_id of this MarketOrderDelayedTradeClose.  # noqa: E501

        The ID of the Trade being closed  # noqa: E501

        :return: The trade_id of this MarketOrderDelayedTradeClose.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this MarketOrderDelayedTradeClose.

        The ID of the Trade being closed  # noqa: E501

        :param trade_id: The trade_id of this MarketOrderDelayedTradeClose.  # noqa: E501
        :type: str
        """

        self._trade_id = trade_id

    @property
    def client_trade_id(self):
        """Gets the client_trade_id of this MarketOrderDelayedTradeClose.  # noqa: E501

        The Client ID of the Trade being closed  # noqa: E501

        :return: The client_trade_id of this MarketOrderDelayedTradeClose.  # noqa: E501
        :rtype: str
        """
        return self._client_trade_id

    @client_trade_id.setter
    def client_trade_id(self, client_trade_id):
        """Sets the client_trade_id of this MarketOrderDelayedTradeClose.

        The Client ID of the Trade being closed  # noqa: E501

        :param client_trade_id: The client_trade_id of this MarketOrderDelayedTradeClose.  # noqa: E501
        :type: str
        """

        self._client_trade_id = client_trade_id

    @property
    def source_transaction_id(self):
        """Gets the source_transaction_id of this MarketOrderDelayedTradeClose.  # noqa: E501

        The Transaction ID of the DelayedTradeClosure transaction to which this Delayed Trade Close belongs to  # noqa: E501

        :return: The source_transaction_id of this MarketOrderDelayedTradeClose.  # noqa: E501
        :rtype: str
        """
        return self._source_transaction_id

    @source_transaction_id.setter
    def source_transaction_id(self, source_transaction_id):
        """Sets the source_transaction_id of this MarketOrderDelayedTradeClose.

        The Transaction ID of the DelayedTradeClosure transaction to which this Delayed Trade Close belongs to  # noqa: E501

        :param source_transaction_id: The source_transaction_id of this MarketOrderDelayedTradeClose.  # noqa: E501
        :type: str
        """

        self._source_transaction_id = source_transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketOrderDelayedTradeClose):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
