# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.client_extensions import ClientExtensions  # noqa: F401,E501


class TakeProfitOrderRejectTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'time': 'str',
        'user_id': 'int',
        'account_id': 'str',
        'batch_id': 'str',
        'request_id': 'str',
        'type': 'str',
        'trade_id': 'str',
        'client_trade_id': 'str',
        'price': 'str',
        'time_in_force': 'str',
        'gtd_time': 'str',
        'trigger_condition': 'str',
        'reason': 'str',
        'client_extensions': 'ClientExtensions',
        'order_fill_transaction_id': 'str',
        'intended_replaces_order_id': 'str',
        'reject_reason': 'str'
    }

    attribute_map = {
        'id': 'id',
        'time': 'time',
        'user_id': 'userID',
        'account_id': 'AccountID',
        'batch_id': 'batchID',
        'request_id': 'requestID',
        'type': 'type',
        'trade_id': 'tradeID',
        'client_trade_id': 'clientTradeID',
        'price': 'price',
        'time_in_force': 'timeInForce',
        'gtd_time': 'gtdTime',
        'trigger_condition': 'triggerCondition',
        'reason': 'reason',
        'client_extensions': 'clientExtensions',
        'order_fill_transaction_id': 'orderFillTransactionID',
        'intended_replaces_order_id': 'intendedReplacesOrderID',
        'reject_reason': 'rejectReason'
    }

    def __init__(self, id=None, time=None, user_id=None, account_id=None, batch_id=None, request_id=None, type=None, trade_id=None, client_trade_id=None, price=None, time_in_force=None, gtd_time=None, trigger_condition=None, reason=None, client_extensions=None, order_fill_transaction_id=None, intended_replaces_order_id=None, reject_reason=None):  # noqa: E501
        """TakeProfitOrderRejectTransaction - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._time = None
        self._user_id = None
        self._account_id = None
        self._batch_id = None
        self._request_id = None
        self._type = None
        self._trade_id = None
        self._client_trade_id = None
        self._price = None
        self._time_in_force = None
        self._gtd_time = None
        self._trigger_condition = None
        self._reason = None
        self._client_extensions = None
        self._order_fill_transaction_id = None
        self._intended_replaces_order_id = None
        self._reject_reason = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if time is not None:
            self.time = time
        if user_id is not None:
            self.user_id = user_id
        if account_id is not None:
            self.account_id = account_id
        if batch_id is not None:
            self.batch_id = batch_id
        if request_id is not None:
            self.request_id = request_id
        if type is not None:
            self.type = type
        if trade_id is not None:
            self.trade_id = trade_id
        if client_trade_id is not None:
            self.client_trade_id = client_trade_id
        if price is not None:
            self.price = price
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if gtd_time is not None:
            self.gtd_time = gtd_time
        if trigger_condition is not None:
            self.trigger_condition = trigger_condition
        if reason is not None:
            self.reason = reason
        if client_extensions is not None:
            self.client_extensions = client_extensions
        if order_fill_transaction_id is not None:
            self.order_fill_transaction_id = order_fill_transaction_id
        if intended_replaces_order_id is not None:
            self.intended_replaces_order_id = intended_replaces_order_id
        if reject_reason is not None:
            self.reject_reason = reject_reason

    @property
    def id(self):
        """Gets the id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The Transaction's Identifier.  # noqa: E501

        :return: The id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TakeProfitOrderRejectTransaction.

        The Transaction's Identifier.  # noqa: E501

        :param id: The id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def time(self):
        """Gets the time of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The date/time when the Transaction was created.  # noqa: E501

        :return: The time of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this TakeProfitOrderRejectTransaction.

        The date/time when the Transaction was created.  # noqa: E501

        :param time: The time of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def user_id(self):
        """Gets the user_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The ID of the user that initiated the creation of the Transaction.  # noqa: E501

        :return: The user_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TakeProfitOrderRejectTransaction.

        The ID of the user that initiated the creation of the Transaction.  # noqa: E501

        :param user_id: The user_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def account_id(self):
        """Gets the account_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The ID of the Account the Transaction was created for.  # noqa: E501

        :return: The account_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TakeProfitOrderRejectTransaction.

        The ID of the Account the Transaction was created for.  # noqa: E501

        :param account_id: The account_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def batch_id(self):
        """Gets the batch_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The ID of the \"batch\" that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously.  # noqa: E501

        :return: The batch_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._batch_id

    @batch_id.setter
    def batch_id(self, batch_id):
        """Sets the batch_id of this TakeProfitOrderRejectTransaction.

        The ID of the \"batch\" that the Transaction belongs to. Transactions in the same batch are applied to the Account simultaneously.  # noqa: E501

        :param batch_id: The batch_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._batch_id = batch_id

    @property
    def request_id(self):
        """Gets the request_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The Request ID of the request which generated the transaction.  # noqa: E501

        :return: The request_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this TakeProfitOrderRejectTransaction.

        The Request ID of the request which generated the transaction.  # noqa: E501

        :param request_id: The request_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def type(self):
        """Gets the type of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The Type of the Transaction. Always set to \"TAKE_PROFIT_ORDER_REJECT\" in a TakeProfitOrderRejectTransaction.  # noqa: E501

        :return: The type of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TakeProfitOrderRejectTransaction.

        The Type of the Transaction. Always set to \"TAKE_PROFIT_ORDER_REJECT\" in a TakeProfitOrderRejectTransaction.  # noqa: E501

        :param type: The type of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATE", "CLOSE", "REOPEN", "CLIENT_CONFIGURE", "CLIENT_CONFIGURE_REJECT", "TRANSFER_FUNDS", "TRANSFER_FUNDS_REJECT", "MARKET_ORDER", "MARKET_ORDER_REJECT", "FIXED_PRICE_ORDER", "LIMIT_ORDER", "LIMIT_ORDER_REJECT", "STOP_ORDER", "STOP_ORDER_REJECT", "MARKET_IF_TOUCHED_ORDER", "MARKET_IF_TOUCHED_ORDER_REJECT", "TAKE_PROFIT_ORDER", "TAKE_PROFIT_ORDER_REJECT", "STOP_LOSS_ORDER", "STOP_LOSS_ORDER_REJECT", "TRAILING_STOP_LOSS_ORDER", "TRAILING_STOP_LOSS_ORDER_REJECT", "ORDER_FILL", "ORDER_CANCEL", "ORDER_CANCEL_REJECT", "ORDER_CLIENT_EXTENSIONS_MODIFY", "ORDER_CLIENT_EXTENSIONS_MODIFY_REJECT", "TRADE_CLIENT_EXTENSIONS_MODIFY", "TRADE_CLIENT_EXTENSIONS_MODIFY_REJECT", "MARGIN_CALL_ENTER", "MARGIN_CALL_EXTEND", "MARGIN_CALL_EXIT", "DELAYED_TRADE_CLOSURE", "DAILY_FINANCING", "RESET_RESETTABLE_PL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def trade_id(self):
        """Gets the trade_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The ID of the Trade to close when the price threshold is breached.  # noqa: E501

        :return: The trade_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this TakeProfitOrderRejectTransaction.

        The ID of the Trade to close when the price threshold is breached.  # noqa: E501

        :param trade_id: The trade_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._trade_id = trade_id

    @property
    def client_trade_id(self):
        """Gets the client_trade_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The client ID of the Trade to be closed when the price threshold is breached.  # noqa: E501

        :return: The client_trade_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._client_trade_id

    @client_trade_id.setter
    def client_trade_id(self, client_trade_id):
        """Sets the client_trade_id of this TakeProfitOrderRejectTransaction.

        The client ID of the Trade to be closed when the price threshold is breached.  # noqa: E501

        :param client_trade_id: The client_trade_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._client_trade_id = client_trade_id

    @property
    def price(self):
        """Gets the price of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The price threshold specified for the TakeProfit Order. The associated Trade will be closed by a market price that is equal to or better than this threshold.  # noqa: E501

        :return: The price of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TakeProfitOrderRejectTransaction.

        The price threshold specified for the TakeProfit Order. The associated Trade will be closed by a market price that is equal to or better than this threshold.  # noqa: E501

        :param price: The price of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def time_in_force(self):
        """Gets the time_in_force of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The time-in-force requested for the TakeProfit Order. Restricted to \"GTC\", \"GFD\" and \"GTD\" for TakeProfit Orders.  # noqa: E501

        :return: The time_in_force of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this TakeProfitOrderRejectTransaction.

        The time-in-force requested for the TakeProfit Order. Restricted to \"GTC\", \"GFD\" and \"GTD\" for TakeProfit Orders.  # noqa: E501

        :param time_in_force: The time_in_force of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["GTC", "GTD", "GFD", "FOK", "IOC"]  # noqa: E501
        if time_in_force not in allowed_values:
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}"  # noqa: E501
                .format(time_in_force, allowed_values)
            )

        self._time_in_force = time_in_force

    @property
    def gtd_time(self):
        """Gets the gtd_time of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The date/time when the TakeProfit Order will be cancelled if its timeInForce is \"GTD\".  # noqa: E501

        :return: The gtd_time of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._gtd_time

    @gtd_time.setter
    def gtd_time(self, gtd_time):
        """Sets the gtd_time of this TakeProfitOrderRejectTransaction.

        The date/time when the TakeProfit Order will be cancelled if its timeInForce is \"GTD\".  # noqa: E501

        :param gtd_time: The gtd_time of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._gtd_time = gtd_time

    @property
    def trigger_condition(self):
        """Gets the trigger_condition of this TakeProfitOrderRejectTransaction.  # noqa: E501

        Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component. This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order. A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be \"DEFAULT\", or the \"natural\" trigger side \"DEFAULT\" results in. So for a Stop Loss Order for a long trade valid values are \"DEFAULT\" and \"BID\", and for short trades \"DEFAULT\" and \"ASK\" are valid.  # noqa: E501

        :return: The trigger_condition of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._trigger_condition

    @trigger_condition.setter
    def trigger_condition(self, trigger_condition):
        """Sets the trigger_condition of this TakeProfitOrderRejectTransaction.

        Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component. This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order. A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be \"DEFAULT\", or the \"natural\" trigger side \"DEFAULT\" results in. So for a Stop Loss Order for a long trade valid values are \"DEFAULT\" and \"BID\", and for short trades \"DEFAULT\" and \"ASK\" are valid.  # noqa: E501

        :param trigger_condition: The trigger_condition of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "INVERSE", "BID", "ASK", "MID"]  # noqa: E501
        if trigger_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_condition, allowed_values)
            )

        self._trigger_condition = trigger_condition

    @property
    def reason(self):
        """Gets the reason of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The reason that the Take Profit Order was initiated  # noqa: E501

        :return: The reason of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TakeProfitOrderRejectTransaction.

        The reason that the Take Profit Order was initiated  # noqa: E501

        :param reason: The reason of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLIENT_ORDER", "REPLACEMENT", "ON_FILL"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def client_extensions(self):
        """Gets the client_extensions of this TakeProfitOrderRejectTransaction.  # noqa: E501


        :return: The client_extensions of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._client_extensions

    @client_extensions.setter
    def client_extensions(self, client_extensions):
        """Sets the client_extensions of this TakeProfitOrderRejectTransaction.


        :param client_extensions: The client_extensions of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: ClientExtensions
        """

        self._client_extensions = client_extensions

    @property
    def order_fill_transaction_id(self):
        """Gets the order_fill_transaction_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The ID of the OrderFill Transaction that caused this Order to be created (only provided if this Order was created automatically when another Order was filled).  # noqa: E501

        :return: The order_fill_transaction_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._order_fill_transaction_id

    @order_fill_transaction_id.setter
    def order_fill_transaction_id(self, order_fill_transaction_id):
        """Sets the order_fill_transaction_id of this TakeProfitOrderRejectTransaction.

        The ID of the OrderFill Transaction that caused this Order to be created (only provided if this Order was created automatically when another Order was filled).  # noqa: E501

        :param order_fill_transaction_id: The order_fill_transaction_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._order_fill_transaction_id = order_fill_transaction_id

    @property
    def intended_replaces_order_id(self):
        """Gets the intended_replaces_order_id of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The ID of the Order that this Order was intended to replace (only provided if this Order was intended to replace an existing Order).  # noqa: E501

        :return: The intended_replaces_order_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._intended_replaces_order_id

    @intended_replaces_order_id.setter
    def intended_replaces_order_id(self, intended_replaces_order_id):
        """Sets the intended_replaces_order_id of this TakeProfitOrderRejectTransaction.

        The ID of the Order that this Order was intended to replace (only provided if this Order was intended to replace an existing Order).  # noqa: E501

        :param intended_replaces_order_id: The intended_replaces_order_id of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """

        self._intended_replaces_order_id = intended_replaces_order_id

    @property
    def reject_reason(self):
        """Gets the reject_reason of this TakeProfitOrderRejectTransaction.  # noqa: E501

        The reason that the Reject Transaction was created  # noqa: E501

        :return: The reject_reason of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this TakeProfitOrderRejectTransaction.

        The reason that the Reject Transaction was created  # noqa: E501

        :param reject_reason: The reject_reason of this TakeProfitOrderRejectTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL_SERVER_ERROR", "INSTRUMENT_PRICE_UNKNOWN", "ACCOUNT_NOT_ACTIVE", "ACCOUNT_LOCKED", "ACCOUNT_ORDER_CREATION_LOCKED", "ACCOUNT_CONFIGURATION_LOCKED", "ACCOUNT_DEPOSIT_LOCKED", "ACCOUNT_WITHDRAWAL_LOCKED", "ACCOUNT_ORDER_CANCEL_LOCKED", "INSTRUMENT_NOT_TRADEABLE", "PENDING_ORDERS_ALLOWED_EXCEEDED", "ORDER_ID_UNSPECIFIED", "ORDER_DOESNT_EXIST", "ORDER_IDENTIFIER_INCONSISTENCY", "TRADE_ID_UNSPECIFIED", "TRADE_DOESNT_EXIST", "TRADE_IDENTIFIER_INCONSISTENCY", "INSUFFICIENT_MARGIN", "INSTRUMENT_MISSING", "INSTRUMENT_UNKNOWN", "UNITS_MISSING", "UNITS_INVALID", "UNITS_PRECISION_EXCEEDED", "UNITS_LIMIT_EXCEEDED", "UNITS_MIMIMUM_NOT_MET", "PRICE_MISSING", "PRICE_INVALID", "PRICE_PRECISION_EXCEEDED", "PRICE_DISTANCE_MISSING", "PRICE_DISTANCE_INVALID", "PRICE_DISTANCE_PRECISION_EXCEEDED", "PRICE_DISTANCE_MAXIMUM_EXCEEDED", "PRICE_DISTANCE_MINIMUM_NOT_MET", "TIME_IN_FORCE_MISSING", "TIME_IN_FORCE_INVALID", "TIME_IN_FORCE_GTD_TIMESTAMP_MISSING", "TIME_IN_FORCE_GTD_TIMESTAMP_IN_PAST", "PRICE_BOUND_INVALID", "PRICE_BOUND_PRECISION_EXCEEDED", "ORDERS_ON_FILL_DUPLICATE_CLIENT_ORDER_IDS", "TRADE_ON_FILL_CLIENT_EXTENSIONS_NOT_SUPPORTED", "CLIENT_ORDER_ID_INVALID", "CLIENT_ORDER_ID_ALREADY_EXISTS", "CLIENT_ORDER_TAG_INVALID", "CLIENT_ORDER_COMMENT_INVALID", "CLIENT_TRADE_ID_INVALID", "CLIENT_TRADE_ID_ALREADY_EXISTS", "CLIENT_TRADE_TAG_INVALID", "CLIENT_TRADE_COMMENT_INVALID", "ORDER_FILL_POSITION_ACTION_MISSING", "ORDER_FILL_POSITION_ACTION_INVALID", "TRIGGER_CONDITION_MISSING", "TRIGGER_CONDITION_INVALID", "ORDER_PARTIAL_FILL_OPTION_MISSING", "ORDER_PARTIAL_FILL_OPTION_INVALID", "INVALID_REISSUE_IMMEDIATE_PARTIAL_FILL", "TAKE_PROFIT_ORDER_ALREADY_EXISTS", "TAKE_PROFIT_ON_FILL_PRICE_MISSING", "TAKE_PROFIT_ON_FILL_PRICE_INVALID", "TAKE_PROFIT_ON_FILL_PRICE_PRECISION_EXCEEDED", "TAKE_PROFIT_ON_FILL_TIME_IN_FORCE_MISSING", "TAKE_PROFIT_ON_FILL_TIME_IN_FORCE_INVALID", "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_MISSING", "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_IN_PAST", "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_ID_INVALID", "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_TAG_INVALID", "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_COMMENT_INVALID", "TAKE_PROFIT_ON_FILL_TRIGGER_CONDITION_MISSING", "TAKE_PROFIT_ON_FILL_TRIGGER_CONDITION_INVALID", "STOP_LOSS_ORDER_ALREADY_EXISTS", "STOP_LOSS_ORDER_GUARANTEED_REQUIRED", "STOP_LOSS_ORDER_GUARANTEED_PRICE_WITHIN_SPREAD", "STOP_LOSS_ORDER_GUARANTEED_NOT_ALLOWED", "STOP_LOSS_ORDER_GUARANTEED_HALTED_CREATE_VIOLATION", "STOP_LOSS_ORDER_GUARANTEED_HALTED_TIGHTEN_VIOLATION", "STOP_LOSS_ORDER_GUARANTEED_HEDGING_NOT_ALLOWED", "STOP_LOSS_ORDER_GUARANTEED_MINIMUM_DISTANCE_NOT_MET", "STOP_LOSS_ORDER_NOT_CANCELABLE", "STOP_LOSS_ORDER_NOT_REPLACEABLE", "STOP_LOSS_ORDER_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED", "STOP_LOSS_ORDER_PRICE_AND_DISTANCE_BOTH_SPECIFIED", "STOP_LOSS_ORDER_PRICE_AND_DISTANCE_BOTH_MISSING", "STOP_LOSS_ON_FILL_REQUIRED_FOR_PENDING_ORDER", "STOP_LOSS_ON_FILL_GUARANTEED_NOT_ALLOWED", "STOP_LOSS_ON_FILL_GUARANTEED_REQUIRED", "STOP_LOSS_ON_FILL_PRICE_MISSING", "STOP_LOSS_ON_FILL_PRICE_INVALID", "STOP_LOSS_ON_FILL_PRICE_PRECISION_EXCEEDED", "STOP_LOSS_ON_FILL_GUARANTEED_MINIMUM_DISTANCE_NOT_MET", "STOP_LOSS_ON_FILL_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED", "STOP_LOSS_ON_FILL_DISTANCE_INVALID", "STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED", "STOP_LOSS_ON_FILL_DISTANCE_PRECISION_EXCEEDED", "STOP_LOSS_ON_FILL_PRICE_AND_DISTANCE_BOTH_SPECIFIED", "STOP_LOSS_ON_FILL_PRICE_AND_DISTANCE_BOTH_MISSING", "STOP_LOSS_ON_FILL_TIME_IN_FORCE_MISSING", "STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID", "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_MISSING", "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST", "STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_INVALID", "STOP_LOSS_ON_FILL_CLIENT_ORDER_TAG_INVALID", "STOP_LOSS_ON_FILL_CLIENT_ORDER_COMMENT_INVALID", "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_MISSING", "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID", "TRAILING_STOP_LOSS_ORDER_ALREADY_EXISTS", "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MISSING", "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_INVALID", "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_PRECISION_EXCEEDED", "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED", "TRAILING_STOP_LOSS_ON_FILL_PRICE_DISTANCE_MINIMUM_NOT_MET", "TRAILING_STOP_LOSS_ON_FILL_TIME_IN_FORCE_MISSING", "TRAILING_STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID", "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_MISSING", "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST", "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_INVALID", "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_TAG_INVALID", "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_COMMENT_INVALID", "TRAILING_STOP_LOSS_ORDERS_NOT_SUPPORTED", "TRAILING_STOP_LOSS_ON_FILL_TRIGGER_CONDITION_MISSING", "TRAILING_STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID", "CLOSE_TRADE_TYPE_MISSING", "CLOSE_TRADE_PARTIAL_UNITS_MISSING", "CLOSE_TRADE_UNITS_EXCEED_TRADE_SIZE", "CLOSEOUT_POSITION_DOESNT_EXIST", "CLOSEOUT_POSITION_INCOMPLETE_SPECIFICATION", "CLOSEOUT_POSITION_UNITS_EXCEED_POSITION_SIZE", "CLOSEOUT_POSITION_REJECT", "CLOSEOUT_POSITION_PARTIAL_UNITS_MISSING", "MARKUP_GROUP_ID_INVALID", "POSITION_AGGREGATION_MODE_INVALID", "ADMIN_CONFIGURE_DATA_MISSING", "MARGIN_RATE_INVALID", "MARGIN_RATE_WOULD_TRIGGER_CLOSEOUT", "ALIAS_INVALID", "CLIENT_CONFIGURE_DATA_MISSING", "MARGIN_RATE_WOULD_TRIGGER_MARGIN_CALL", "AMOUNT_INVALID", "INSUFFICIENT_FUNDS", "AMOUNT_MISSING", "FUNDING_REASON_MISSING", "CLIENT_EXTENSIONS_DATA_MISSING", "REPLACING_ORDER_INVALID", "REPLACING_TRADE_ID_INVALID"]  # noqa: E501
        if reject_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reject_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reject_reason, allowed_values)
            )

        self._reject_reason = reject_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TakeProfitOrderRejectTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
