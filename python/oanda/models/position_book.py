# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.position_book_bucket import PositionBookBucket  # noqa: F401,E501


class PositionBook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instrument': 'str',
        'time': 'str',
        'price': 'str',
        'bucket_width': 'str',
        'buckets': 'list[PositionBookBucket]'
    }

    attribute_map = {
        'instrument': 'instrument',
        'time': 'time',
        'price': 'price',
        'bucket_width': 'bucketWidth',
        'buckets': 'buckets'
    }

    def __init__(self, instrument=None, time=None, price=None, bucket_width=None, buckets=None):  # noqa: E501
        """PositionBook - a model defined in Swagger"""  # noqa: E501

        self._instrument = None
        self._time = None
        self._price = None
        self._bucket_width = None
        self._buckets = None
        self.discriminator = None

        if instrument is not None:
            self.instrument = instrument
        if time is not None:
            self.time = time
        if price is not None:
            self.price = price
        if bucket_width is not None:
            self.bucket_width = bucket_width
        if buckets is not None:
            self.buckets = buckets

    @property
    def instrument(self):
        """Gets the instrument of this PositionBook.  # noqa: E501

        The position book's instrument  # noqa: E501

        :return: The instrument of this PositionBook.  # noqa: E501
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """Sets the instrument of this PositionBook.

        The position book's instrument  # noqa: E501

        :param instrument: The instrument of this PositionBook.  # noqa: E501
        :type: str
        """

        self._instrument = instrument

    @property
    def time(self):
        """Gets the time of this PositionBook.  # noqa: E501

        The time when the position book snapshot was created  # noqa: E501

        :return: The time of this PositionBook.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PositionBook.

        The time when the position book snapshot was created  # noqa: E501

        :param time: The time of this PositionBook.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def price(self):
        """Gets the price of this PositionBook.  # noqa: E501

        The price (midpoint) for the position book's instrument at the time of the position book snapshot  # noqa: E501

        :return: The price of this PositionBook.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PositionBook.

        The price (midpoint) for the position book's instrument at the time of the position book snapshot  # noqa: E501

        :param price: The price of this PositionBook.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def bucket_width(self):
        """Gets the bucket_width of this PositionBook.  # noqa: E501

        The price width for each bucket. Each bucket covers the price range from the bucket's price to the bucket's price + bucketWidth.  # noqa: E501

        :return: The bucket_width of this PositionBook.  # noqa: E501
        :rtype: str
        """
        return self._bucket_width

    @bucket_width.setter
    def bucket_width(self, bucket_width):
        """Sets the bucket_width of this PositionBook.

        The price width for each bucket. Each bucket covers the price range from the bucket's price to the bucket's price + bucketWidth.  # noqa: E501

        :param bucket_width: The bucket_width of this PositionBook.  # noqa: E501
        :type: str
        """

        self._bucket_width = bucket_width

    @property
    def buckets(self):
        """Gets the buckets of this PositionBook.  # noqa: E501

        The partitioned position book, divided into buckets using a default bucket width. These buckets are only provided for price ranges which actually contain order or position data.  # noqa: E501

        :return: The buckets of this PositionBook.  # noqa: E501
        :rtype: list[PositionBookBucket]
        """
        return self._buckets

    @buckets.setter
    def buckets(self, buckets):
        """Sets the buckets of this PositionBook.

        The partitioned position book, divided into buckets using a default bucket width. These buckets are only provided for price ranges which actually contain order or position data.  # noqa: E501

        :param buckets: The buckets of this PositionBook.  # noqa: E501
        :type: list[PositionBookBucket]
        """

        self._buckets = buckets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionBook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
