# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.client_extensions import ClientExtensions  # noqa: F401,E501


class ClosePositionBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'long_units': 'str',
        'long_client_extensions': 'ClientExtensions',
        'short_units': 'str',
        'short_client_extensions': 'ClientExtensions'
    }

    attribute_map = {
        'long_units': 'longUnits',
        'long_client_extensions': 'longClientExtensions',
        'short_units': 'shortUnits',
        'short_client_extensions': 'shortClientExtensions'
    }

    def __init__(self, long_units=None, long_client_extensions=None, short_units=None, short_client_extensions=None):  # noqa: E501
        """ClosePositionBody - a model defined in Swagger"""  # noqa: E501

        self._long_units = None
        self._long_client_extensions = None
        self._short_units = None
        self._short_client_extensions = None
        self.discriminator = None

        if long_units is not None:
            self.long_units = long_units
        if long_client_extensions is not None:
            self.long_client_extensions = long_client_extensions
        if short_units is not None:
            self.short_units = short_units
        if short_client_extensions is not None:
            self.short_client_extensions = short_client_extensions

    @property
    def long_units(self):
        """Gets the long_units of this ClosePositionBody.  # noqa: E501

        Indication of how much of the long Position to closeout. Either the string \"ALL\", the string \"NONE\", or a DecimalNumber representing how many units of the long position to close using a PositionCloseout MarketOrder. The units specified must always be positive.  # noqa: E501

        :return: The long_units of this ClosePositionBody.  # noqa: E501
        :rtype: str
        """
        return self._long_units

    @long_units.setter
    def long_units(self, long_units):
        """Sets the long_units of this ClosePositionBody.

        Indication of how much of the long Position to closeout. Either the string \"ALL\", the string \"NONE\", or a DecimalNumber representing how many units of the long position to close using a PositionCloseout MarketOrder. The units specified must always be positive.  # noqa: E501

        :param long_units: The long_units of this ClosePositionBody.  # noqa: E501
        :type: str
        """

        self._long_units = long_units

    @property
    def long_client_extensions(self):
        """Gets the long_client_extensions of this ClosePositionBody.  # noqa: E501


        :return: The long_client_extensions of this ClosePositionBody.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._long_client_extensions

    @long_client_extensions.setter
    def long_client_extensions(self, long_client_extensions):
        """Sets the long_client_extensions of this ClosePositionBody.


        :param long_client_extensions: The long_client_extensions of this ClosePositionBody.  # noqa: E501
        :type: ClientExtensions
        """

        self._long_client_extensions = long_client_extensions

    @property
    def short_units(self):
        """Gets the short_units of this ClosePositionBody.  # noqa: E501

        Indication of how much of the short Position to closeout. Either the string \"ALL\", the string \"NONE\", or a DecimalNumber representing how many units of the short position to close using a PositionCloseout MarketOrder. The units specified must always be positive.  # noqa: E501

        :return: The short_units of this ClosePositionBody.  # noqa: E501
        :rtype: str
        """
        return self._short_units

    @short_units.setter
    def short_units(self, short_units):
        """Sets the short_units of this ClosePositionBody.

        Indication of how much of the short Position to closeout. Either the string \"ALL\", the string \"NONE\", or a DecimalNumber representing how many units of the short position to close using a PositionCloseout MarketOrder. The units specified must always be positive.  # noqa: E501

        :param short_units: The short_units of this ClosePositionBody.  # noqa: E501
        :type: str
        """

        self._short_units = short_units

    @property
    def short_client_extensions(self):
        """Gets the short_client_extensions of this ClosePositionBody.  # noqa: E501


        :return: The short_client_extensions of this ClosePositionBody.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._short_client_extensions

    @short_client_extensions.setter
    def short_client_extensions(self, short_client_extensions):
        """Sets the short_client_extensions of this ClosePositionBody.


        :param short_client_extensions: The short_client_extensions of this ClosePositionBody.  # noqa: E501
        :type: ClientExtensions
        """

        self._short_client_extensions = short_client_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClosePositionBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
