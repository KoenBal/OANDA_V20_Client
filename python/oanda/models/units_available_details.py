# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UnitsAvailableDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'long': 'str',
        'short': 'str'
    }

    attribute_map = {
        'long': 'long',
        'short': 'short'
    }

    def __init__(self, long=None, short=None):  # noqa: E501
        """UnitsAvailableDetails - a model defined in Swagger"""  # noqa: E501

        self._long = None
        self._short = None
        self.discriminator = None

        if long is not None:
            self.long = long
        if short is not None:
            self.short = short

    @property
    def long(self):
        """Gets the long of this UnitsAvailableDetails.  # noqa: E501

        The units available for long Orders.  # noqa: E501

        :return: The long of this UnitsAvailableDetails.  # noqa: E501
        :rtype: str
        """
        return self._long

    @long.setter
    def long(self, long):
        """Sets the long of this UnitsAvailableDetails.

        The units available for long Orders.  # noqa: E501

        :param long: The long of this UnitsAvailableDetails.  # noqa: E501
        :type: str
        """

        self._long = long

    @property
    def short(self):
        """Gets the short of this UnitsAvailableDetails.  # noqa: E501

        The units available for short Orders.  # noqa: E501

        :return: The short of this UnitsAvailableDetails.  # noqa: E501
        :rtype: str
        """
        return self._short

    @short.setter
    def short(self, short):
        """Sets the short of this UnitsAvailableDetails.

        The units available for short Orders.  # noqa: E501

        :param short: The short of this UnitsAvailableDetails.  # noqa: E501
        :type: str
        """

        self._short = short

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnitsAvailableDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
