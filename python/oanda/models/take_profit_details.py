# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.client_extensions import ClientExtensions  # noqa: F401,E501


class TakeProfitDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'str',
        'time_in_force': 'str',
        'gtd_time': 'str',
        'client_extensions': 'ClientExtensions'
    }

    attribute_map = {
        'price': 'price',
        'time_in_force': 'timeInForce',
        'gtd_time': 'gtdTime',
        'client_extensions': 'clientExtensions'
    }

    def __init__(self, price=None, time_in_force=None, gtd_time=None, client_extensions=None):  # noqa: E501
        """TakeProfitDetails - a model defined in Swagger"""  # noqa: E501

        self._price = None
        self._time_in_force = None
        self._gtd_time = None
        self._client_extensions = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if gtd_time is not None:
            self.gtd_time = gtd_time
        if client_extensions is not None:
            self.client_extensions = client_extensions

    @property
    def price(self):
        """Gets the price of this TakeProfitDetails.  # noqa: E501

        The price that the Take Profit Order will be triggered at. Only one of the price and distance fields may be specified.  # noqa: E501

        :return: The price of this TakeProfitDetails.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TakeProfitDetails.

        The price that the Take Profit Order will be triggered at. Only one of the price and distance fields may be specified.  # noqa: E501

        :param price: The price of this TakeProfitDetails.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def time_in_force(self):
        """Gets the time_in_force of this TakeProfitDetails.  # noqa: E501

        The time in force for the created Take Profit Order. This may only be GTC, GTD or GFD.  # noqa: E501

        :return: The time_in_force of this TakeProfitDetails.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this TakeProfitDetails.

        The time in force for the created Take Profit Order. This may only be GTC, GTD or GFD.  # noqa: E501

        :param time_in_force: The time_in_force of this TakeProfitDetails.  # noqa: E501
        :type: str
        """
        allowed_values = ["GTC", "GTD", "GFD", "FOK", "IOC"]  # noqa: E501
        if time_in_force not in allowed_values:
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}"  # noqa: E501
                .format(time_in_force, allowed_values)
            )

        self._time_in_force = time_in_force

    @property
    def gtd_time(self):
        """Gets the gtd_time of this TakeProfitDetails.  # noqa: E501

        The date when the Take Profit Order will be cancelled on if timeInForce is GTD.  # noqa: E501

        :return: The gtd_time of this TakeProfitDetails.  # noqa: E501
        :rtype: str
        """
        return self._gtd_time

    @gtd_time.setter
    def gtd_time(self, gtd_time):
        """Sets the gtd_time of this TakeProfitDetails.

        The date when the Take Profit Order will be cancelled on if timeInForce is GTD.  # noqa: E501

        :param gtd_time: The gtd_time of this TakeProfitDetails.  # noqa: E501
        :type: str
        """

        self._gtd_time = gtd_time

    @property
    def client_extensions(self):
        """Gets the client_extensions of this TakeProfitDetails.  # noqa: E501


        :return: The client_extensions of this TakeProfitDetails.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._client_extensions

    @client_extensions.setter
    def client_extensions(self, client_extensions):
        """Sets the client_extensions of this TakeProfitDetails.


        :param client_extensions: The client_extensions of this TakeProfitDetails.  # noqa: E501
        :type: ClientExtensions
        """

        self._client_extensions = client_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TakeProfitDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
