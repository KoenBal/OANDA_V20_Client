# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_id': 'str',
        'client_order_id': 'str'
    }

    attribute_map = {
        'order_id': 'orderID',
        'client_order_id': 'clientOrderID'
    }

    def __init__(self, order_id=None, client_order_id=None):  # noqa: E501
        """OrderIdentifier - a model defined in Swagger"""  # noqa: E501

        self._order_id = None
        self._client_order_id = None
        self.discriminator = None

        if order_id is not None:
            self.order_id = order_id
        if client_order_id is not None:
            self.client_order_id = client_order_id

    @property
    def order_id(self):
        """Gets the order_id of this OrderIdentifier.  # noqa: E501

        The OANDA-assigned Order ID  # noqa: E501

        :return: The order_id of this OrderIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this OrderIdentifier.

        The OANDA-assigned Order ID  # noqa: E501

        :param order_id: The order_id of this OrderIdentifier.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def client_order_id(self):
        """Gets the client_order_id of this OrderIdentifier.  # noqa: E501

        The client-provided client Order ID  # noqa: E501

        :return: The client_order_id of this OrderIdentifier.  # noqa: E501
        :rtype: str
        """
        return self._client_order_id

    @client_order_id.setter
    def client_order_id(self, client_order_id):
        """Sets the client_order_id of this OrderIdentifier.

        The client-provided client Order ID  # noqa: E501

        :param client_order_id: The client_order_id of this OrderIdentifier.  # noqa: E501
        :type: str
        """

        self._client_order_id = client_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderIdentifier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
