# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.client_extensions import ClientExtensions  # noqa: F401,E501


class SetOrderClientExtensionsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_extensions': 'ClientExtensions',
        'trade_client_extensions': 'ClientExtensions'
    }

    attribute_map = {
        'client_extensions': 'clientExtensions',
        'trade_client_extensions': 'tradeClientExtensions'
    }

    def __init__(self, client_extensions=None, trade_client_extensions=None):  # noqa: E501
        """SetOrderClientExtensionsBody - a model defined in Swagger"""  # noqa: E501

        self._client_extensions = None
        self._trade_client_extensions = None
        self.discriminator = None

        if client_extensions is not None:
            self.client_extensions = client_extensions
        if trade_client_extensions is not None:
            self.trade_client_extensions = trade_client_extensions

    @property
    def client_extensions(self):
        """Gets the client_extensions of this SetOrderClientExtensionsBody.  # noqa: E501


        :return: The client_extensions of this SetOrderClientExtensionsBody.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._client_extensions

    @client_extensions.setter
    def client_extensions(self, client_extensions):
        """Sets the client_extensions of this SetOrderClientExtensionsBody.


        :param client_extensions: The client_extensions of this SetOrderClientExtensionsBody.  # noqa: E501
        :type: ClientExtensions
        """

        self._client_extensions = client_extensions

    @property
    def trade_client_extensions(self):
        """Gets the trade_client_extensions of this SetOrderClientExtensionsBody.  # noqa: E501


        :return: The trade_client_extensions of this SetOrderClientExtensionsBody.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._trade_client_extensions

    @trade_client_extensions.setter
    def trade_client_extensions(self, trade_client_extensions):
        """Sets the trade_client_extensions of this SetOrderClientExtensionsBody.


        :param trade_client_extensions: The trade_client_extensions of this SetOrderClientExtensionsBody.  # noqa: E501
        :type: ClientExtensions
        """

        self._trade_client_extensions = trade_client_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetOrderClientExtensionsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
