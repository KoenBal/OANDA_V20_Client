# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuoteHomeConversionFactors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'positive_units': 'str',
        'negative_units': 'str'
    }

    attribute_map = {
        'positive_units': 'positiveUnits',
        'negative_units': 'negativeUnits'
    }

    def __init__(self, positive_units=None, negative_units=None):  # noqa: E501
        """QuoteHomeConversionFactors - a model defined in Swagger"""  # noqa: E501

        self._positive_units = None
        self._negative_units = None
        self.discriminator = None

        if positive_units is not None:
            self.positive_units = positive_units
        if negative_units is not None:
            self.negative_units = negative_units

    @property
    def positive_units(self):
        """Gets the positive_units of this QuoteHomeConversionFactors.  # noqa: E501

        The factor used to convert a positive amount of the Price's Instrument's quote currency into a positive amount of the Account's home currency.  Conversion is performed by multiplying the quote units by the conversion factor.  # noqa: E501

        :return: The positive_units of this QuoteHomeConversionFactors.  # noqa: E501
        :rtype: str
        """
        return self._positive_units

    @positive_units.setter
    def positive_units(self, positive_units):
        """Sets the positive_units of this QuoteHomeConversionFactors.

        The factor used to convert a positive amount of the Price's Instrument's quote currency into a positive amount of the Account's home currency.  Conversion is performed by multiplying the quote units by the conversion factor.  # noqa: E501

        :param positive_units: The positive_units of this QuoteHomeConversionFactors.  # noqa: E501
        :type: str
        """

        self._positive_units = positive_units

    @property
    def negative_units(self):
        """Gets the negative_units of this QuoteHomeConversionFactors.  # noqa: E501

        The factor used to convert a negative amount of the Price's Instrument's quote currency into a negative amount of the Account's home currency.  Conversion is performed by multiplying the quote units by the conversion factor.  # noqa: E501

        :return: The negative_units of this QuoteHomeConversionFactors.  # noqa: E501
        :rtype: str
        """
        return self._negative_units

    @negative_units.setter
    def negative_units(self, negative_units):
        """Sets the negative_units of this QuoteHomeConversionFactors.

        The factor used to convert a negative amount of the Price's Instrument's quote currency into a negative amount of the Account's home currency.  Conversion is performed by multiplying the quote units by the conversion factor.  # noqa: E501

        :param negative_units: The negative_units of this QuoteHomeConversionFactors.  # noqa: E501
        :type: str
        """

        self._negative_units = negative_units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteHomeConversionFactors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
