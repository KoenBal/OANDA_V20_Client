# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.account_changes import AccountChanges  # noqa: F401,E501
from oanda.models.account_changes_state import AccountChangesState  # noqa: F401,E501


class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'changes': 'AccountChanges',
        'state': 'AccountChangesState',
        'last_transaction_id': 'str'
    }

    attribute_map = {
        'changes': 'changes',
        'state': 'state',
        'last_transaction_id': 'lastTransactionID'
    }

    def __init__(self, changes=None, state=None, last_transaction_id=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501

        self._changes = None
        self._state = None
        self._last_transaction_id = None
        self.discriminator = None

        if changes is not None:
            self.changes = changes
        if state is not None:
            self.state = state
        if last_transaction_id is not None:
            self.last_transaction_id = last_transaction_id

    @property
    def changes(self):
        """Gets the changes of this InlineResponse2005.  # noqa: E501


        :return: The changes of this InlineResponse2005.  # noqa: E501
        :rtype: AccountChanges
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this InlineResponse2005.


        :param changes: The changes of this InlineResponse2005.  # noqa: E501
        :type: AccountChanges
        """

        self._changes = changes

    @property
    def state(self):
        """Gets the state of this InlineResponse2005.  # noqa: E501


        :return: The state of this InlineResponse2005.  # noqa: E501
        :rtype: AccountChangesState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InlineResponse2005.


        :param state: The state of this InlineResponse2005.  # noqa: E501
        :type: AccountChangesState
        """

        self._state = state

    @property
    def last_transaction_id(self):
        """Gets the last_transaction_id of this InlineResponse2005.  # noqa: E501

        The ID of the last Transaction created for the Account.  This Transaction ID should be used for future poll requests, as the client has already observed all changes up to and including it.  # noqa: E501

        :return: The last_transaction_id of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._last_transaction_id

    @last_transaction_id.setter
    def last_transaction_id(self, last_transaction_id):
        """Sets the last_transaction_id of this InlineResponse2005.

        The ID of the last Transaction created for the Account.  This Transaction ID should be used for future poll requests, as the client has already observed all changes up to and including it.  # noqa: E501

        :param last_transaction_id: The last_transaction_id of this InlineResponse2005.  # noqa: E501
        :type: str
        """

        self._last_transaction_id = last_transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
