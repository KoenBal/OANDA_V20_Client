# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PricingHeartbeat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'time': 'str'
    }

    attribute_map = {
        'type': 'type',
        'time': 'time'
    }

    def __init__(self, type=None, time=None):  # noqa: E501
        """PricingHeartbeat - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._time = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if time is not None:
            self.time = time

    @property
    def type(self):
        """Gets the type of this PricingHeartbeat.  # noqa: E501

        The string \"HEARTBEAT\"  # noqa: E501

        :return: The type of this PricingHeartbeat.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PricingHeartbeat.

        The string \"HEARTBEAT\"  # noqa: E501

        :param type: The type of this PricingHeartbeat.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def time(self):
        """Gets the time of this PricingHeartbeat.  # noqa: E501

        The date/time when the Heartbeat was created.  # noqa: E501

        :return: The time of this PricingHeartbeat.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PricingHeartbeat.

        The date/time when the Heartbeat was created.  # noqa: E501

        :param time: The time of this PricingHeartbeat.  # noqa: E501
        :type: str
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingHeartbeat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
