# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderCancelReason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR"
    ACCOUNT_LOCKED = "ACCOUNT_LOCKED"
    ACCOUNT_NEW_POSITIONS_LOCKED = "ACCOUNT_NEW_POSITIONS_LOCKED"
    ACCOUNT_ORDER_CREATION_LOCKED = "ACCOUNT_ORDER_CREATION_LOCKED"
    ACCOUNT_ORDER_FILL_LOCKED = "ACCOUNT_ORDER_FILL_LOCKED"
    CLIENT_REQUEST = "CLIENT_REQUEST"
    MIGRATION = "MIGRATION"
    MARKET_HALTED = "MARKET_HALTED"
    LINKED_TRADE_CLOSED = "LINKED_TRADE_CLOSED"
    TIME_IN_FORCE_EXPIRED = "TIME_IN_FORCE_EXPIRED"
    INSUFFICIENT_MARGIN = "INSUFFICIENT_MARGIN"
    FIFO_VIOLATION = "FIFO_VIOLATION"
    BOUNDS_VIOLATION = "BOUNDS_VIOLATION"
    CLIENT_REQUEST_REPLACED = "CLIENT_REQUEST_REPLACED"
    INSUFFICIENT_LIQUIDITY = "INSUFFICIENT_LIQUIDITY"
    TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_IN_PAST = "TAKE_PROFIT_ON_FILL_GTD_TIMESTAMP_IN_PAST"
    TAKE_PROFIT_ON_FILL_LOSS = "TAKE_PROFIT_ON_FILL_LOSS"
    LOSING_TAKE_PROFIT = "LOSING_TAKE_PROFIT"
    STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST = "STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST"
    STOP_LOSS_ON_FILL_LOSS = "STOP_LOSS_ON_FILL_LOSS"
    STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED = "STOP_LOSS_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED"
    STOP_LOSS_ON_FILL_REQUIRED = "STOP_LOSS_ON_FILL_REQUIRED"
    STOP_LOSS_ON_FILL_GUARANTEED_REQUIRED = "STOP_LOSS_ON_FILL_GUARANTEED_REQUIRED"
    STOP_LOSS_ON_FILL_GUARANTEED_NOT_ALLOWED = "STOP_LOSS_ON_FILL_GUARANTEED_NOT_ALLOWED"
    STOP_LOSS_ON_FILL_GUARANTEED_MINIMUM_DISTANCE_NOT_MET = "STOP_LOSS_ON_FILL_GUARANTEED_MINIMUM_DISTANCE_NOT_MET"
    STOP_LOSS_ON_FILL_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED = "STOP_LOSS_ON_FILL_GUARANTEED_LEVEL_RESTRICTION_EXCEEDED"
    STOP_LOSS_ON_FILL_GUARANTEED_HEDGING_NOT_ALLOWED = "STOP_LOSS_ON_FILL_GUARANTEED_HEDGING_NOT_ALLOWED"
    STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID = "STOP_LOSS_ON_FILL_TIME_IN_FORCE_INVALID"
    STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID = "STOP_LOSS_ON_FILL_TRIGGER_CONDITION_INVALID"
    TAKE_PROFIT_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED = "TAKE_PROFIT_ON_FILL_PRICE_DISTANCE_MAXIMUM_EXCEEDED"
    TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST = "TRAILING_STOP_LOSS_ON_FILL_GTD_TIMESTAMP_IN_PAST"
    CLIENT_TRADE_ID_ALREADY_EXISTS = "CLIENT_TRADE_ID_ALREADY_EXISTS"
    POSITION_CLOSEOUT_FAILED = "POSITION_CLOSEOUT_FAILED"
    OPEN_TRADES_ALLOWED_EXCEEDED = "OPEN_TRADES_ALLOWED_EXCEEDED"
    PENDING_ORDERS_ALLOWED_EXCEEDED = "PENDING_ORDERS_ALLOWED_EXCEEDED"
    TAKE_PROFIT_ON_FILL_CLIENT_ORDER_ID_ALREADY_EXISTS = "TAKE_PROFIT_ON_FILL_CLIENT_ORDER_ID_ALREADY_EXISTS"
    STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_ALREADY_EXISTS = "STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_ALREADY_EXISTS"
    TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_ALREADY_EXISTS = "TRAILING_STOP_LOSS_ON_FILL_CLIENT_ORDER_ID_ALREADY_EXISTS"
    POSITION_SIZE_EXCEEDED = "POSITION_SIZE_EXCEEDED"
    HEDGING_GSLO_VIOLATION = "HEDGING_GSLO_VIOLATION"
    ACCOUNT_POSITION_VALUE_LIMIT_EXCEEDED = "ACCOUNT_POSITION_VALUE_LIMIT_EXCEEDED"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """OrderCancelReason - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCancelReason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
