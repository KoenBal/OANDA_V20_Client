# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from oanda.models.client_extensions import ClientExtensions  # noqa: F401,E501


class StopLossOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'trade_id': 'str',
        'client_trade_id': 'str',
        'price': 'str',
        'distance': 'str',
        'time_in_force': 'str',
        'gtd_time': 'str',
        'trigger_condition': 'str',
        'guaranteed': 'bool',
        'client_extensions': 'ClientExtensions'
    }

    attribute_map = {
        'type': 'type',
        'trade_id': 'tradeID',
        'client_trade_id': 'clientTradeID',
        'price': 'price',
        'distance': 'distance',
        'time_in_force': 'timeInForce',
        'gtd_time': 'gtdTime',
        'trigger_condition': 'triggerCondition',
        'guaranteed': 'guaranteed',
        'client_extensions': 'clientExtensions'
    }

    def __init__(self, type=None, trade_id=None, client_trade_id=None, price=None, distance=None, time_in_force=None, gtd_time=None, trigger_condition=None, guaranteed=None, client_extensions=None):  # noqa: E501
        """StopLossOrderRequest - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._trade_id = None
        self._client_trade_id = None
        self._price = None
        self._distance = None
        self._time_in_force = None
        self._gtd_time = None
        self._trigger_condition = None
        self._guaranteed = None
        self._client_extensions = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if trade_id is not None:
            self.trade_id = trade_id
        if client_trade_id is not None:
            self.client_trade_id = client_trade_id
        if price is not None:
            self.price = price
        if distance is not None:
            self.distance = distance
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if gtd_time is not None:
            self.gtd_time = gtd_time
        if trigger_condition is not None:
            self.trigger_condition = trigger_condition
        if guaranteed is not None:
            self.guaranteed = guaranteed
        if client_extensions is not None:
            self.client_extensions = client_extensions

    @property
    def type(self):
        """Gets the type of this StopLossOrderRequest.  # noqa: E501

        The type of the Order to Create. Must be set to \"STOP_LOSS\" when creating a Stop Loss Order.  # noqa: E501

        :return: The type of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StopLossOrderRequest.

        The type of the Order to Create. Must be set to \"STOP_LOSS\" when creating a Stop Loss Order.  # noqa: E501

        :param type: The type of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["MARKET", "LIMIT", "STOP", "MARKET_IF_TOUCHED", "TAKE_PROFIT", "STOP_LOSS", "TRAILING_STOP_LOSS", "FIXED_PRICE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def trade_id(self):
        """Gets the trade_id of this StopLossOrderRequest.  # noqa: E501

        The ID of the Trade to close when the price threshold is breached.  # noqa: E501

        :return: The trade_id of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this StopLossOrderRequest.

        The ID of the Trade to close when the price threshold is breached.  # noqa: E501

        :param trade_id: The trade_id of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """

        self._trade_id = trade_id

    @property
    def client_trade_id(self):
        """Gets the client_trade_id of this StopLossOrderRequest.  # noqa: E501

        The client ID of the Trade to be closed when the price threshold is breached.  # noqa: E501

        :return: The client_trade_id of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_trade_id

    @client_trade_id.setter
    def client_trade_id(self, client_trade_id):
        """Sets the client_trade_id of this StopLossOrderRequest.

        The client ID of the Trade to be closed when the price threshold is breached.  # noqa: E501

        :param client_trade_id: The client_trade_id of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """

        self._client_trade_id = client_trade_id

    @property
    def price(self):
        """Gets the price of this StopLossOrderRequest.  # noqa: E501

        The price threshold specified for the Stop Loss Order. If the guaranteed flag is false, the associated Trade will be closed by a market price that is equal to or worse than this threshold. If the flag is true the associated Trade will be closed at this price.  # noqa: E501

        :return: The price of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this StopLossOrderRequest.

        The price threshold specified for the Stop Loss Order. If the guaranteed flag is false, the associated Trade will be closed by a market price that is equal to or worse than this threshold. If the flag is true the associated Trade will be closed at this price.  # noqa: E501

        :param price: The price of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def distance(self):
        """Gets the distance of this StopLossOrderRequest.  # noqa: E501

        Specifies the distance (in price units) from the Account's current price to use as the Stop Loss Order price. If the Trade is short the Instrument's bid price is used, and for long Trades the ask is used.  # noqa: E501

        :return: The distance of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this StopLossOrderRequest.

        Specifies the distance (in price units) from the Account's current price to use as the Stop Loss Order price. If the Trade is short the Instrument's bid price is used, and for long Trades the ask is used.  # noqa: E501

        :param distance: The distance of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """

        self._distance = distance

    @property
    def time_in_force(self):
        """Gets the time_in_force of this StopLossOrderRequest.  # noqa: E501

        The time-in-force requested for the StopLoss Order. Restricted to \"GTC\", \"GFD\" and \"GTD\" for StopLoss Orders.  # noqa: E501

        :return: The time_in_force of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this StopLossOrderRequest.

        The time-in-force requested for the StopLoss Order. Restricted to \"GTC\", \"GFD\" and \"GTD\" for StopLoss Orders.  # noqa: E501

        :param time_in_force: The time_in_force of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["GTC", "GTD", "GFD", "FOK", "IOC"]  # noqa: E501
        if time_in_force not in allowed_values:
            raise ValueError(
                "Invalid value for `time_in_force` ({0}), must be one of {1}"  # noqa: E501
                .format(time_in_force, allowed_values)
            )

        self._time_in_force = time_in_force

    @property
    def gtd_time(self):
        """Gets the gtd_time of this StopLossOrderRequest.  # noqa: E501

        The date/time when the StopLoss Order will be cancelled if its timeInForce is \"GTD\".  # noqa: E501

        :return: The gtd_time of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._gtd_time

    @gtd_time.setter
    def gtd_time(self, gtd_time):
        """Sets the gtd_time of this StopLossOrderRequest.

        The date/time when the StopLoss Order will be cancelled if its timeInForce is \"GTD\".  # noqa: E501

        :param gtd_time: The gtd_time of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """

        self._gtd_time = gtd_time

    @property
    def trigger_condition(self):
        """Gets the trigger_condition of this StopLossOrderRequest.  # noqa: E501

        Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component. This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order. A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be \"DEFAULT\", or the \"natural\" trigger side \"DEFAULT\" results in. So for a Stop Loss Order for a long trade valid values are \"DEFAULT\" and \"BID\", and for short trades \"DEFAULT\" and \"ASK\" are valid.  # noqa: E501

        :return: The trigger_condition of this StopLossOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._trigger_condition

    @trigger_condition.setter
    def trigger_condition(self, trigger_condition):
        """Sets the trigger_condition of this StopLossOrderRequest.

        Specification of which price component should be used when determining if an Order should be triggered and filled. This allows Orders to be triggered based on the bid, ask, mid, default (ask for buy, bid for sell) or inverse (ask for sell, bid for buy) price depending on the desired behaviour. Orders are always filled using their default price component. This feature is only provided through the REST API. Clients who choose to specify a non-default trigger condition will not see it reflected in any of OANDA's proprietary or partner trading platforms, their transaction history or their account statements. OANDA platforms always assume that an Order's trigger condition is set to the default value when indicating the distance from an Order's trigger price, and will always provide the default trigger condition when creating or modifying an Order. A special restriction applies when creating a guaranteed Stop Loss Order. In this case the TriggerCondition value must either be \"DEFAULT\", or the \"natural\" trigger side \"DEFAULT\" results in. So for a Stop Loss Order for a long trade valid values are \"DEFAULT\" and \"BID\", and for short trades \"DEFAULT\" and \"ASK\" are valid.  # noqa: E501

        :param trigger_condition: The trigger_condition of this StopLossOrderRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "INVERSE", "BID", "ASK", "MID"]  # noqa: E501
        if trigger_condition not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_condition` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_condition, allowed_values)
            )

        self._trigger_condition = trigger_condition

    @property
    def guaranteed(self):
        """Gets the guaranteed of this StopLossOrderRequest.  # noqa: E501

        Flag indicating that the Stop Loss Order is guaranteed. The default value depends on the GuaranteedStopLossOrderMode of the account, if it is REQUIRED, the default will be true, for DISABLED or ENABLED the default is false.  # noqa: E501

        :return: The guaranteed of this StopLossOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._guaranteed

    @guaranteed.setter
    def guaranteed(self, guaranteed):
        """Sets the guaranteed of this StopLossOrderRequest.

        Flag indicating that the Stop Loss Order is guaranteed. The default value depends on the GuaranteedStopLossOrderMode of the account, if it is REQUIRED, the default will be true, for DISABLED or ENABLED the default is false.  # noqa: E501

        :param guaranteed: The guaranteed of this StopLossOrderRequest.  # noqa: E501
        :type: bool
        """

        self._guaranteed = guaranteed

    @property
    def client_extensions(self):
        """Gets the client_extensions of this StopLossOrderRequest.  # noqa: E501


        :return: The client_extensions of this StopLossOrderRequest.  # noqa: E501
        :rtype: ClientExtensions
        """
        return self._client_extensions

    @client_extensions.setter
    def client_extensions(self, client_extensions):
        """Sets the client_extensions of this StopLossOrderRequest.


        :param client_extensions: The client_extensions of this StopLossOrderRequest.  # noqa: E501
        :type: ClientExtensions
        """

        self._client_extensions = client_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StopLossOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
