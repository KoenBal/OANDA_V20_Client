# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'alias': 'str',
        'currency': 'str',
        'balance': 'str',
        'created_by_user_id': 'int',
        'created_time': 'str',
        'guaranteed_stop_loss_order_mode': 'str',
        'pl': 'str',
        'resettable_pl': 'str',
        'resettable_pl_time': 'str',
        'financing': 'str',
        'commission': 'str',
        'guaranteed_execution_fees': 'str',
        'margin_rate': 'str',
        'margin_call_enter_time': 'str',
        'margin_call_extension_count': 'int',
        'last_margin_call_extension_time': 'str',
        'open_trade_count': 'int',
        'open_position_count': 'int',
        'pending_order_count': 'int',
        'hedging_enabled': 'bool',
        'unrealized_pl': 'str',
        'nav': 'str',
        'margin_used': 'str',
        'margin_available': 'str',
        'position_value': 'str',
        'margin_closeout_unrealized_pl': 'str',
        'margin_closeout_nav': 'str',
        'margin_closeout_margin_used': 'str',
        'margin_closeout_percent': 'str',
        'margin_closeout_position_value': 'str',
        'withdrawal_limit': 'str',
        'margin_call_margin_used': 'str',
        'margin_call_percent': 'str',
        'last_transaction_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'alias': 'alias',
        'currency': 'currency',
        'balance': 'balance',
        'created_by_user_id': 'createdByUserID',
        'created_time': 'createdTime',
        'guaranteed_stop_loss_order_mode': 'guaranteedStopLossOrderMode',
        'pl': 'pl',
        'resettable_pl': 'resettablePL',
        'resettable_pl_time': 'resettablePLTime',
        'financing': 'financing',
        'commission': 'commission',
        'guaranteed_execution_fees': 'guaranteedExecutionFees',
        'margin_rate': 'marginRate',
        'margin_call_enter_time': 'marginCallEnterTime',
        'margin_call_extension_count': 'marginCallExtensionCount',
        'last_margin_call_extension_time': 'lastMarginCallExtensionTime',
        'open_trade_count': 'openTradeCount',
        'open_position_count': 'openPositionCount',
        'pending_order_count': 'pendingOrderCount',
        'hedging_enabled': 'hedgingEnabled',
        'unrealized_pl': 'unrealizedPL',
        'nav': 'NAV',
        'margin_used': 'marginUsed',
        'margin_available': 'marginAvailable',
        'position_value': 'positionValue',
        'margin_closeout_unrealized_pl': 'marginCloseoutUnrealizedPL',
        'margin_closeout_nav': 'marginCloseoutNAV',
        'margin_closeout_margin_used': 'marginCloseoutMarginUsed',
        'margin_closeout_percent': 'marginCloseoutPercent',
        'margin_closeout_position_value': 'marginCloseoutPositionValue',
        'withdrawal_limit': 'withdrawalLimit',
        'margin_call_margin_used': 'marginCallMarginUsed',
        'margin_call_percent': 'marginCallPercent',
        'last_transaction_id': 'lastTransactionID'
    }

    def __init__(self, id=None, alias=None, currency=None, balance=None, created_by_user_id=None, created_time=None, guaranteed_stop_loss_order_mode=None, pl=None, resettable_pl=None, resettable_pl_time=None, financing=None, commission=None, guaranteed_execution_fees=None, margin_rate=None, margin_call_enter_time=None, margin_call_extension_count=None, last_margin_call_extension_time=None, open_trade_count=None, open_position_count=None, pending_order_count=None, hedging_enabled=None, unrealized_pl=None, nav=None, margin_used=None, margin_available=None, position_value=None, margin_closeout_unrealized_pl=None, margin_closeout_nav=None, margin_closeout_margin_used=None, margin_closeout_percent=None, margin_closeout_position_value=None, withdrawal_limit=None, margin_call_margin_used=None, margin_call_percent=None, last_transaction_id=None):  # noqa: E501
        """AccountSummary - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._alias = None
        self._currency = None
        self._balance = None
        self._created_by_user_id = None
        self._created_time = None
        self._guaranteed_stop_loss_order_mode = None
        self._pl = None
        self._resettable_pl = None
        self._resettable_pl_time = None
        self._financing = None
        self._commission = None
        self._guaranteed_execution_fees = None
        self._margin_rate = None
        self._margin_call_enter_time = None
        self._margin_call_extension_count = None
        self._last_margin_call_extension_time = None
        self._open_trade_count = None
        self._open_position_count = None
        self._pending_order_count = None
        self._hedging_enabled = None
        self._unrealized_pl = None
        self._nav = None
        self._margin_used = None
        self._margin_available = None
        self._position_value = None
        self._margin_closeout_unrealized_pl = None
        self._margin_closeout_nav = None
        self._margin_closeout_margin_used = None
        self._margin_closeout_percent = None
        self._margin_closeout_position_value = None
        self._withdrawal_limit = None
        self._margin_call_margin_used = None
        self._margin_call_percent = None
        self._last_transaction_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if alias is not None:
            self.alias = alias
        if currency is not None:
            self.currency = currency
        if balance is not None:
            self.balance = balance
        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if created_time is not None:
            self.created_time = created_time
        if guaranteed_stop_loss_order_mode is not None:
            self.guaranteed_stop_loss_order_mode = guaranteed_stop_loss_order_mode
        if pl is not None:
            self.pl = pl
        if resettable_pl is not None:
            self.resettable_pl = resettable_pl
        if resettable_pl_time is not None:
            self.resettable_pl_time = resettable_pl_time
        if financing is not None:
            self.financing = financing
        if commission is not None:
            self.commission = commission
        if guaranteed_execution_fees is not None:
            self.guaranteed_execution_fees = guaranteed_execution_fees
        if margin_rate is not None:
            self.margin_rate = margin_rate
        if margin_call_enter_time is not None:
            self.margin_call_enter_time = margin_call_enter_time
        if margin_call_extension_count is not None:
            self.margin_call_extension_count = margin_call_extension_count
        if last_margin_call_extension_time is not None:
            self.last_margin_call_extension_time = last_margin_call_extension_time
        if open_trade_count is not None:
            self.open_trade_count = open_trade_count
        if open_position_count is not None:
            self.open_position_count = open_position_count
        if pending_order_count is not None:
            self.pending_order_count = pending_order_count
        if hedging_enabled is not None:
            self.hedging_enabled = hedging_enabled
        if unrealized_pl is not None:
            self.unrealized_pl = unrealized_pl
        if nav is not None:
            self.nav = nav
        if margin_used is not None:
            self.margin_used = margin_used
        if margin_available is not None:
            self.margin_available = margin_available
        if position_value is not None:
            self.position_value = position_value
        if margin_closeout_unrealized_pl is not None:
            self.margin_closeout_unrealized_pl = margin_closeout_unrealized_pl
        if margin_closeout_nav is not None:
            self.margin_closeout_nav = margin_closeout_nav
        if margin_closeout_margin_used is not None:
            self.margin_closeout_margin_used = margin_closeout_margin_used
        if margin_closeout_percent is not None:
            self.margin_closeout_percent = margin_closeout_percent
        if margin_closeout_position_value is not None:
            self.margin_closeout_position_value = margin_closeout_position_value
        if withdrawal_limit is not None:
            self.withdrawal_limit = withdrawal_limit
        if margin_call_margin_used is not None:
            self.margin_call_margin_used = margin_call_margin_used
        if margin_call_percent is not None:
            self.margin_call_percent = margin_call_percent
        if last_transaction_id is not None:
            self.last_transaction_id = last_transaction_id

    @property
    def id(self):
        """Gets the id of this AccountSummary.  # noqa: E501

        The Account's identifier  # noqa: E501

        :return: The id of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountSummary.

        The Account's identifier  # noqa: E501

        :param id: The id of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def alias(self):
        """Gets the alias of this AccountSummary.  # noqa: E501

        Client-assigned alias for the Account. Only provided if the Account has an alias set  # noqa: E501

        :return: The alias of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this AccountSummary.

        Client-assigned alias for the Account. Only provided if the Account has an alias set  # noqa: E501

        :param alias: The alias of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def currency(self):
        """Gets the currency of this AccountSummary.  # noqa: E501

        The home currency of the Account  # noqa: E501

        :return: The currency of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountSummary.

        The home currency of the Account  # noqa: E501

        :param currency: The currency of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def balance(self):
        """Gets the balance of this AccountSummary.  # noqa: E501

        The current balance of the Account.  # noqa: E501

        :return: The balance of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountSummary.

        The current balance of the Account.  # noqa: E501

        :param balance: The balance of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this AccountSummary.  # noqa: E501

        ID of the user that created the Account.  # noqa: E501

        :return: The created_by_user_id of this AccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this AccountSummary.

        ID of the user that created the Account.  # noqa: E501

        :param created_by_user_id: The created_by_user_id of this AccountSummary.  # noqa: E501
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def created_time(self):
        """Gets the created_time of this AccountSummary.  # noqa: E501

        The date/time when the Account was created.  # noqa: E501

        :return: The created_time of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AccountSummary.

        The date/time when the Account was created.  # noqa: E501

        :param created_time: The created_time of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._created_time = created_time

    @property
    def guaranteed_stop_loss_order_mode(self):
        """Gets the guaranteed_stop_loss_order_mode of this AccountSummary.  # noqa: E501

        The current guaranteed Stop Loss Order mode of the Account.  # noqa: E501

        :return: The guaranteed_stop_loss_order_mode of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_stop_loss_order_mode

    @guaranteed_stop_loss_order_mode.setter
    def guaranteed_stop_loss_order_mode(self, guaranteed_stop_loss_order_mode):
        """Sets the guaranteed_stop_loss_order_mode of this AccountSummary.

        The current guaranteed Stop Loss Order mode of the Account.  # noqa: E501

        :param guaranteed_stop_loss_order_mode: The guaranteed_stop_loss_order_mode of this AccountSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLED", "ALLOWED", "REQUIRED"]  # noqa: E501
        if guaranteed_stop_loss_order_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `guaranteed_stop_loss_order_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(guaranteed_stop_loss_order_mode, allowed_values)
            )

        self._guaranteed_stop_loss_order_mode = guaranteed_stop_loss_order_mode

    @property
    def pl(self):
        """Gets the pl of this AccountSummary.  # noqa: E501

        The total profit/loss realized over the lifetime of the Account.  # noqa: E501

        :return: The pl of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._pl

    @pl.setter
    def pl(self, pl):
        """Sets the pl of this AccountSummary.

        The total profit/loss realized over the lifetime of the Account.  # noqa: E501

        :param pl: The pl of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._pl = pl

    @property
    def resettable_pl(self):
        """Gets the resettable_pl of this AccountSummary.  # noqa: E501

        The total realized profit/loss for the Account since it was last reset by the client.  # noqa: E501

        :return: The resettable_pl of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._resettable_pl

    @resettable_pl.setter
    def resettable_pl(self, resettable_pl):
        """Sets the resettable_pl of this AccountSummary.

        The total realized profit/loss for the Account since it was last reset by the client.  # noqa: E501

        :param resettable_pl: The resettable_pl of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._resettable_pl = resettable_pl

    @property
    def resettable_pl_time(self):
        """Gets the resettable_pl_time of this AccountSummary.  # noqa: E501

        The date/time that the Account's resettablePL was last reset.  # noqa: E501

        :return: The resettable_pl_time of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._resettable_pl_time

    @resettable_pl_time.setter
    def resettable_pl_time(self, resettable_pl_time):
        """Sets the resettable_pl_time of this AccountSummary.

        The date/time that the Account's resettablePL was last reset.  # noqa: E501

        :param resettable_pl_time: The resettable_pl_time of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._resettable_pl_time = resettable_pl_time

    @property
    def financing(self):
        """Gets the financing of this AccountSummary.  # noqa: E501

        The total amount of financing paid/collected over the lifetime of the Account.  # noqa: E501

        :return: The financing of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._financing

    @financing.setter
    def financing(self, financing):
        """Sets the financing of this AccountSummary.

        The total amount of financing paid/collected over the lifetime of the Account.  # noqa: E501

        :param financing: The financing of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._financing = financing

    @property
    def commission(self):
        """Gets the commission of this AccountSummary.  # noqa: E501

        The total amount of commission paid over the lifetime of the Account.  # noqa: E501

        :return: The commission of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this AccountSummary.

        The total amount of commission paid over the lifetime of the Account.  # noqa: E501

        :param commission: The commission of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._commission = commission

    @property
    def guaranteed_execution_fees(self):
        """Gets the guaranteed_execution_fees of this AccountSummary.  # noqa: E501

        The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders.  # noqa: E501

        :return: The guaranteed_execution_fees of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_execution_fees

    @guaranteed_execution_fees.setter
    def guaranteed_execution_fees(self, guaranteed_execution_fees):
        """Sets the guaranteed_execution_fees of this AccountSummary.

        The total amount of fees charged over the lifetime of the Account for the execution of guaranteed Stop Loss Orders.  # noqa: E501

        :param guaranteed_execution_fees: The guaranteed_execution_fees of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._guaranteed_execution_fees = guaranteed_execution_fees

    @property
    def margin_rate(self):
        """Gets the margin_rate of this AccountSummary.  # noqa: E501

        Client-provided margin rate override for the Account. The effective margin rate of the Account is the lesser of this value and the OANDA margin rate for the Account's division. This value is only provided if a margin rate override exists for the Account.  # noqa: E501

        :return: The margin_rate of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_rate

    @margin_rate.setter
    def margin_rate(self, margin_rate):
        """Sets the margin_rate of this AccountSummary.

        Client-provided margin rate override for the Account. The effective margin rate of the Account is the lesser of this value and the OANDA margin rate for the Account's division. This value is only provided if a margin rate override exists for the Account.  # noqa: E501

        :param margin_rate: The margin_rate of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_rate = margin_rate

    @property
    def margin_call_enter_time(self):
        """Gets the margin_call_enter_time of this AccountSummary.  # noqa: E501

        The date/time when the Account entered a margin call state. Only provided if the Account is in a margin call.  # noqa: E501

        :return: The margin_call_enter_time of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_call_enter_time

    @margin_call_enter_time.setter
    def margin_call_enter_time(self, margin_call_enter_time):
        """Sets the margin_call_enter_time of this AccountSummary.

        The date/time when the Account entered a margin call state. Only provided if the Account is in a margin call.  # noqa: E501

        :param margin_call_enter_time: The margin_call_enter_time of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_call_enter_time = margin_call_enter_time

    @property
    def margin_call_extension_count(self):
        """Gets the margin_call_extension_count of this AccountSummary.  # noqa: E501

        The number of times that the Account's current margin call was extended.  # noqa: E501

        :return: The margin_call_extension_count of this AccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._margin_call_extension_count

    @margin_call_extension_count.setter
    def margin_call_extension_count(self, margin_call_extension_count):
        """Sets the margin_call_extension_count of this AccountSummary.

        The number of times that the Account's current margin call was extended.  # noqa: E501

        :param margin_call_extension_count: The margin_call_extension_count of this AccountSummary.  # noqa: E501
        :type: int
        """

        self._margin_call_extension_count = margin_call_extension_count

    @property
    def last_margin_call_extension_time(self):
        """Gets the last_margin_call_extension_time of this AccountSummary.  # noqa: E501

        The date/time of the Account's last margin call extension.  # noqa: E501

        :return: The last_margin_call_extension_time of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._last_margin_call_extension_time

    @last_margin_call_extension_time.setter
    def last_margin_call_extension_time(self, last_margin_call_extension_time):
        """Sets the last_margin_call_extension_time of this AccountSummary.

        The date/time of the Account's last margin call extension.  # noqa: E501

        :param last_margin_call_extension_time: The last_margin_call_extension_time of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._last_margin_call_extension_time = last_margin_call_extension_time

    @property
    def open_trade_count(self):
        """Gets the open_trade_count of this AccountSummary.  # noqa: E501

        The number of Trades currently open in the Account.  # noqa: E501

        :return: The open_trade_count of this AccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._open_trade_count

    @open_trade_count.setter
    def open_trade_count(self, open_trade_count):
        """Sets the open_trade_count of this AccountSummary.

        The number of Trades currently open in the Account.  # noqa: E501

        :param open_trade_count: The open_trade_count of this AccountSummary.  # noqa: E501
        :type: int
        """

        self._open_trade_count = open_trade_count

    @property
    def open_position_count(self):
        """Gets the open_position_count of this AccountSummary.  # noqa: E501

        The number of Positions currently open in the Account.  # noqa: E501

        :return: The open_position_count of this AccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._open_position_count

    @open_position_count.setter
    def open_position_count(self, open_position_count):
        """Sets the open_position_count of this AccountSummary.

        The number of Positions currently open in the Account.  # noqa: E501

        :param open_position_count: The open_position_count of this AccountSummary.  # noqa: E501
        :type: int
        """

        self._open_position_count = open_position_count

    @property
    def pending_order_count(self):
        """Gets the pending_order_count of this AccountSummary.  # noqa: E501

        The number of Orders currently pending in the Account.  # noqa: E501

        :return: The pending_order_count of this AccountSummary.  # noqa: E501
        :rtype: int
        """
        return self._pending_order_count

    @pending_order_count.setter
    def pending_order_count(self, pending_order_count):
        """Sets the pending_order_count of this AccountSummary.

        The number of Orders currently pending in the Account.  # noqa: E501

        :param pending_order_count: The pending_order_count of this AccountSummary.  # noqa: E501
        :type: int
        """

        self._pending_order_count = pending_order_count

    @property
    def hedging_enabled(self):
        """Gets the hedging_enabled of this AccountSummary.  # noqa: E501

        Flag indicating that the Account has hedging enabled.  # noqa: E501

        :return: The hedging_enabled of this AccountSummary.  # noqa: E501
        :rtype: bool
        """
        return self._hedging_enabled

    @hedging_enabled.setter
    def hedging_enabled(self, hedging_enabled):
        """Sets the hedging_enabled of this AccountSummary.

        Flag indicating that the Account has hedging enabled.  # noqa: E501

        :param hedging_enabled: The hedging_enabled of this AccountSummary.  # noqa: E501
        :type: bool
        """

        self._hedging_enabled = hedging_enabled

    @property
    def unrealized_pl(self):
        """Gets the unrealized_pl of this AccountSummary.  # noqa: E501

        The total unrealized profit/loss for all Trades currently open in the Account.  # noqa: E501

        :return: The unrealized_pl of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._unrealized_pl

    @unrealized_pl.setter
    def unrealized_pl(self, unrealized_pl):
        """Sets the unrealized_pl of this AccountSummary.

        The total unrealized profit/loss for all Trades currently open in the Account.  # noqa: E501

        :param unrealized_pl: The unrealized_pl of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._unrealized_pl = unrealized_pl

    @property
    def nav(self):
        """Gets the nav of this AccountSummary.  # noqa: E501

        The net asset value of the Account. Equal to Account balance + unrealizedPL.  # noqa: E501

        :return: The nav of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._nav

    @nav.setter
    def nav(self, nav):
        """Sets the nav of this AccountSummary.

        The net asset value of the Account. Equal to Account balance + unrealizedPL.  # noqa: E501

        :param nav: The nav of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._nav = nav

    @property
    def margin_used(self):
        """Gets the margin_used of this AccountSummary.  # noqa: E501

        Margin currently used for the Account.  # noqa: E501

        :return: The margin_used of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_used

    @margin_used.setter
    def margin_used(self, margin_used):
        """Sets the margin_used of this AccountSummary.

        Margin currently used for the Account.  # noqa: E501

        :param margin_used: The margin_used of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_used = margin_used

    @property
    def margin_available(self):
        """Gets the margin_available of this AccountSummary.  # noqa: E501

        Margin available for Account currency.  # noqa: E501

        :return: The margin_available of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_available

    @margin_available.setter
    def margin_available(self, margin_available):
        """Sets the margin_available of this AccountSummary.

        Margin available for Account currency.  # noqa: E501

        :param margin_available: The margin_available of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_available = margin_available

    @property
    def position_value(self):
        """Gets the position_value of this AccountSummary.  # noqa: E501

        The value of the Account's open positions represented in the Account's home currency.  # noqa: E501

        :return: The position_value of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._position_value

    @position_value.setter
    def position_value(self, position_value):
        """Sets the position_value of this AccountSummary.

        The value of the Account's open positions represented in the Account's home currency.  # noqa: E501

        :param position_value: The position_value of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._position_value = position_value

    @property
    def margin_closeout_unrealized_pl(self):
        """Gets the margin_closeout_unrealized_pl of this AccountSummary.  # noqa: E501

        The Account's margin closeout unrealized PL.  # noqa: E501

        :return: The margin_closeout_unrealized_pl of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_closeout_unrealized_pl

    @margin_closeout_unrealized_pl.setter
    def margin_closeout_unrealized_pl(self, margin_closeout_unrealized_pl):
        """Sets the margin_closeout_unrealized_pl of this AccountSummary.

        The Account's margin closeout unrealized PL.  # noqa: E501

        :param margin_closeout_unrealized_pl: The margin_closeout_unrealized_pl of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_closeout_unrealized_pl = margin_closeout_unrealized_pl

    @property
    def margin_closeout_nav(self):
        """Gets the margin_closeout_nav of this AccountSummary.  # noqa: E501

        The Account's margin closeout NAV.  # noqa: E501

        :return: The margin_closeout_nav of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_closeout_nav

    @margin_closeout_nav.setter
    def margin_closeout_nav(self, margin_closeout_nav):
        """Sets the margin_closeout_nav of this AccountSummary.

        The Account's margin closeout NAV.  # noqa: E501

        :param margin_closeout_nav: The margin_closeout_nav of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_closeout_nav = margin_closeout_nav

    @property
    def margin_closeout_margin_used(self):
        """Gets the margin_closeout_margin_used of this AccountSummary.  # noqa: E501

        The Account's margin closeout margin used.  # noqa: E501

        :return: The margin_closeout_margin_used of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_closeout_margin_used

    @margin_closeout_margin_used.setter
    def margin_closeout_margin_used(self, margin_closeout_margin_used):
        """Sets the margin_closeout_margin_used of this AccountSummary.

        The Account's margin closeout margin used.  # noqa: E501

        :param margin_closeout_margin_used: The margin_closeout_margin_used of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_closeout_margin_used = margin_closeout_margin_used

    @property
    def margin_closeout_percent(self):
        """Gets the margin_closeout_percent of this AccountSummary.  # noqa: E501

        The Account's margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.  # noqa: E501

        :return: The margin_closeout_percent of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_closeout_percent

    @margin_closeout_percent.setter
    def margin_closeout_percent(self, margin_closeout_percent):
        """Sets the margin_closeout_percent of this AccountSummary.

        The Account's margin closeout percentage. When this value is 1.0 or above the Account is in a margin closeout situation.  # noqa: E501

        :param margin_closeout_percent: The margin_closeout_percent of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_closeout_percent = margin_closeout_percent

    @property
    def margin_closeout_position_value(self):
        """Gets the margin_closeout_position_value of this AccountSummary.  # noqa: E501

        The value of the Account's open positions as used for margin closeout calculations represented in the Account's home currency.  # noqa: E501

        :return: The margin_closeout_position_value of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_closeout_position_value

    @margin_closeout_position_value.setter
    def margin_closeout_position_value(self, margin_closeout_position_value):
        """Sets the margin_closeout_position_value of this AccountSummary.

        The value of the Account's open positions as used for margin closeout calculations represented in the Account's home currency.  # noqa: E501

        :param margin_closeout_position_value: The margin_closeout_position_value of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_closeout_position_value = margin_closeout_position_value

    @property
    def withdrawal_limit(self):
        """Gets the withdrawal_limit of this AccountSummary.  # noqa: E501

        The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.  # noqa: E501

        :return: The withdrawal_limit of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._withdrawal_limit

    @withdrawal_limit.setter
    def withdrawal_limit(self, withdrawal_limit):
        """Sets the withdrawal_limit of this AccountSummary.

        The current WithdrawalLimit for the account which will be zero or a positive value indicating how much can be withdrawn from the account.  # noqa: E501

        :param withdrawal_limit: The withdrawal_limit of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._withdrawal_limit = withdrawal_limit

    @property
    def margin_call_margin_used(self):
        """Gets the margin_call_margin_used of this AccountSummary.  # noqa: E501

        The Account's margin call margin used.  # noqa: E501

        :return: The margin_call_margin_used of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_call_margin_used

    @margin_call_margin_used.setter
    def margin_call_margin_used(self, margin_call_margin_used):
        """Sets the margin_call_margin_used of this AccountSummary.

        The Account's margin call margin used.  # noqa: E501

        :param margin_call_margin_used: The margin_call_margin_used of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_call_margin_used = margin_call_margin_used

    @property
    def margin_call_percent(self):
        """Gets the margin_call_percent of this AccountSummary.  # noqa: E501

        The Account's margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.  # noqa: E501

        :return: The margin_call_percent of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._margin_call_percent

    @margin_call_percent.setter
    def margin_call_percent(self, margin_call_percent):
        """Sets the margin_call_percent of this AccountSummary.

        The Account's margin call percentage. When this value is 1.0 or above the Account is in a margin call situation.  # noqa: E501

        :param margin_call_percent: The margin_call_percent of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._margin_call_percent = margin_call_percent

    @property
    def last_transaction_id(self):
        """Gets the last_transaction_id of this AccountSummary.  # noqa: E501

        The ID of the last Transaction created for the Account.  # noqa: E501

        :return: The last_transaction_id of this AccountSummary.  # noqa: E501
        :rtype: str
        """
        return self._last_transaction_id

    @last_transaction_id.setter
    def last_transaction_id(self, last_transaction_id):
        """Sets the last_transaction_id of this AccountSummary.

        The ID of the last Transaction created for the Account.  # noqa: E501

        :param last_transaction_id: The last_transaction_id of this AccountSummary.  # noqa: E501
        :type: str
        """

        self._last_transaction_id = last_transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
