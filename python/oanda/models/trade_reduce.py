# coding: utf-8

"""
    OANDA v20 REST API

    The full OANDA v20 REST API Specification. This specification defines how to interact with v20 Accounts, Trades, Orders, Pricing and more. To authenticate use the string 'Bearer ' followed by the token which can be obtained at https://www.oanda.com/demo-account/tpa/personal_token  # noqa: E501

    OpenAPI spec version: 3.0.23
    Contact: api@oanda.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TradeReduce(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_id': 'str',
        'units': 'str',
        'price': 'str',
        'realized_pl': 'str',
        'financing': 'str',
        'guaranteed_execution_fee': 'str',
        'half_spread_cost': 'str'
    }

    attribute_map = {
        'trade_id': 'tradeID',
        'units': 'units',
        'price': 'price',
        'realized_pl': 'realizedPL',
        'financing': 'financing',
        'guaranteed_execution_fee': 'guaranteedExecutionFee',
        'half_spread_cost': 'halfSpreadCost'
    }

    def __init__(self, trade_id=None, units=None, price=None, realized_pl=None, financing=None, guaranteed_execution_fee=None, half_spread_cost=None):  # noqa: E501
        """TradeReduce - a model defined in Swagger"""  # noqa: E501

        self._trade_id = None
        self._units = None
        self._price = None
        self._realized_pl = None
        self._financing = None
        self._guaranteed_execution_fee = None
        self._half_spread_cost = None
        self.discriminator = None

        if trade_id is not None:
            self.trade_id = trade_id
        if units is not None:
            self.units = units
        if price is not None:
            self.price = price
        if realized_pl is not None:
            self.realized_pl = realized_pl
        if financing is not None:
            self.financing = financing
        if guaranteed_execution_fee is not None:
            self.guaranteed_execution_fee = guaranteed_execution_fee
        if half_spread_cost is not None:
            self.half_spread_cost = half_spread_cost

    @property
    def trade_id(self):
        """Gets the trade_id of this TradeReduce.  # noqa: E501

        The ID of the Trade that was reduced or closed  # noqa: E501

        :return: The trade_id of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this TradeReduce.

        The ID of the Trade that was reduced or closed  # noqa: E501

        :param trade_id: The trade_id of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._trade_id = trade_id

    @property
    def units(self):
        """Gets the units of this TradeReduce.  # noqa: E501

        The number of units that the Trade was reduced by  # noqa: E501

        :return: The units of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this TradeReduce.

        The number of units that the Trade was reduced by  # noqa: E501

        :param units: The units of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def price(self):
        """Gets the price of this TradeReduce.  # noqa: E501

        The average price that the units were closed at. This price may be clamped for guaranteed Stop Loss Orders.  # noqa: E501

        :return: The price of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TradeReduce.

        The average price that the units were closed at. This price may be clamped for guaranteed Stop Loss Orders.  # noqa: E501

        :param price: The price of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._price = price

    @property
    def realized_pl(self):
        """Gets the realized_pl of this TradeReduce.  # noqa: E501

        The PL realized when reducing the Trade  # noqa: E501

        :return: The realized_pl of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._realized_pl

    @realized_pl.setter
    def realized_pl(self, realized_pl):
        """Sets the realized_pl of this TradeReduce.

        The PL realized when reducing the Trade  # noqa: E501

        :param realized_pl: The realized_pl of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._realized_pl = realized_pl

    @property
    def financing(self):
        """Gets the financing of this TradeReduce.  # noqa: E501

        The financing paid/collected when reducing the Trade  # noqa: E501

        :return: The financing of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._financing

    @financing.setter
    def financing(self, financing):
        """Sets the financing of this TradeReduce.

        The financing paid/collected when reducing the Trade  # noqa: E501

        :param financing: The financing of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._financing = financing

    @property
    def guaranteed_execution_fee(self):
        """Gets the guaranteed_execution_fee of this TradeReduce.  # noqa: E501

        This is the fee that is charged for closing the Trade if it has a guaranteed Stop Loss Order attached to it.  # noqa: E501

        :return: The guaranteed_execution_fee of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._guaranteed_execution_fee

    @guaranteed_execution_fee.setter
    def guaranteed_execution_fee(self, guaranteed_execution_fee):
        """Sets the guaranteed_execution_fee of this TradeReduce.

        This is the fee that is charged for closing the Trade if it has a guaranteed Stop Loss Order attached to it.  # noqa: E501

        :param guaranteed_execution_fee: The guaranteed_execution_fee of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._guaranteed_execution_fee = guaranteed_execution_fee

    @property
    def half_spread_cost(self):
        """Gets the half_spread_cost of this TradeReduce.  # noqa: E501

        The half spread cost for the trade reduce/close. This can be a positive or negative value and is represented in the home currency of the Account.  # noqa: E501

        :return: The half_spread_cost of this TradeReduce.  # noqa: E501
        :rtype: str
        """
        return self._half_spread_cost

    @half_spread_cost.setter
    def half_spread_cost(self, half_spread_cost):
        """Sets the half_spread_cost of this TradeReduce.

        The half spread cost for the trade reduce/close. This can be a positive or negative value and is represented in the home currency of the Account.  # noqa: E501

        :param half_spread_cost: The half_spread_cost of this TradeReduce.  # noqa: E501
        :type: str
        """

        self._half_spread_cost = half_spread_cost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradeReduce):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
